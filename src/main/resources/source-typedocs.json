[
  {
    "name":"QueryType",
    "description":null,
    "fieldDocs":[
      {
        "name":"getFredFile",
        "description":"Returns the current content of the fred.json via raw file access.\n<p>\n This method will re-read and reparse the fred.json file on *every* invocation.\n<\/p>",
        "paramDocs":[
          
        ]
      },
      {
        "name":"getFredResource",
        "description":"Returns the current content of the fred.json resource/file as Fred instance.\n<p>\n    The resource handle mechanism makes sure we only reload and reparse fred.json when\n    the file changed.\n<\/p>\n<p>\n    The resource loader system internally creates a file watch service that asynchronously listens to file change\n    events and throws away stale resource content. The next call to .getContent() will then reread and\n    reparse the content.\n<\/p>",
        "paramDocs":[
          
        ]
      },
      {
        "name":"iQuery",
        "description":"Queries [T] objects based on the given query config",
        "paramDocs":[
          {
            "name":"type",
            "description":""
          },
          {
            "name":"env",
            "description":""
          },
          {
            "name":"config",
            "description":"configuration for the Interactive query."
          }
        ]
      },
      {
        "name":"iQueryAlternate",
        "description":"Alternate iQuery method for [T]",
        "paramDocs":[
          {
            "name":"type",
            "description":""
          },
          {
            "name":"env",
            "description":""
          },
          {
            "name":"config",
            "description":"configuration for the Interactive query."
          }
        ]
      }
    ]
  },
  {
    "name":"MutationType",
    "description":null,
    "fieldDocs":[
      {
        "name":"configureColumns",
        "description":"Example for Datagrid column configuration. Stores columns in public.grid_columns",
        "paramDocs":[
          {
            "name":"name",
            "description":"query name"
          },
          {
            "name":"columns",
            "description":"columns JSONB object"
          }
        ]
      },
      {
        "name":"updateFredFile",
        "description":"Updates the fred.json file with the new content from a Fred instance via raw file IO",
        "paramDocs":[
          {
            "name":"fred",
            "description":"new Fred"
          }
        ]
      },
      {
        "name":"updateFredResource",
        "description":"Updates the fred.json resource/file with the new content from a Fred instance.\n\n<p>\n    We can only have write access if the application is deployed as \"exploded WAR\". In cases of a WAR deployment, all\n    servlet resources are read via input stream and don't allow updates.\n<\/p>",
        "paramDocs":[
          {
            "name":"fred",
            "description":"new Fred"
          }
        ]
      }
    ]
  },
  {
    "name":"ErrorViewModel",
    "description":"View model for the error.js view.",
    "fieldDocs":[
      {
        "name":"detail",
        "description":"Returns the error detail message",
        "paramDocs":[
          
        ]
      },
      {
        "name":"showLogin",
        "description":"If true, show the login form below the error making the error view look like another login view.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"title",
        "description":"Returns the error title",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"Fred",
    "description":"Container bean for the file/resource example.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"FredItem",
    "description":"Item within a Fred",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"ModePolicy",
    "description":"Enumerates all policies of how to combine rule-based mode values with the effective field modes before rule application.",
    "fieldDocs":[
      {
        "name":"IGNORE_LOCAL",
        "description":"Ignore local mode attribute completely.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"OVERRIDE",
        "description":"Override if effective mode is be NORMAL",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"Result",
    "description":"Generic result wrapper. Allows client-side code to register post-processors based on it.",
    "fieldDocs":[
      {
        "name":"payload",
        "description":"Returns the payload of type [P]",
        "paramDocs":[
          
        ]
      },
      {
        "name":"type",
        "description":"Returns the result type.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"ResultType",
    "description":null,
    "fieldDocs":[
      
    ]
  },
  {
    "name":"RuleField",
    "description":null,
    "fieldDocs":[
      {
        "name":"mode",
        "description":"Returns the fixed mode for this field. How this mode is applied depends on the #modePolicy.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"ValidationRules",
    "description":"Encapsulates the set of all named validation rules. Corresponds to the top-level rules.json file.",
    "fieldDocs":[
      
    ]
  }
]