/*
 * This file is generated by jOOQ.
 */
package de.quinscape.automatontest.domain;


import de.quinscape.automatontest.domain.tables.AppAttachment;
import de.quinscape.automatontest.domain.tables.AppAttachmentData;
import de.quinscape.automatontest.domain.tables.AppConfig;
import de.quinscape.automatontest.domain.tables.AppLogin;
import de.quinscape.automatontest.domain.tables.AppTranslation;
import de.quinscape.automatontest.domain.tables.AppUser;
import de.quinscape.automatontest.domain.tables.AppUserConfig;
import de.quinscape.automatontest.domain.tables.AppVersion;
import de.quinscape.automatontest.domain.tables.Baz;
import de.quinscape.automatontest.domain.tables.BazLink;
import de.quinscape.automatontest.domain.tables.BazValue;
import de.quinscape.automatontest.domain.tables.Corge;
import de.quinscape.automatontest.domain.tables.CorgeAssoc;
import de.quinscape.automatontest.domain.tables.CorgeLink;
import de.quinscape.automatontest.domain.tables.CorgeType;
import de.quinscape.automatontest.domain.tables.Foo;
import de.quinscape.automatontest.domain.tables.FooType;
import de.quinscape.automatontest.domain.tables.Garply;
import de.quinscape.automatontest.domain.tables.Grault;
import de.quinscape.automatontest.domain.tables.GridColumns;
import de.quinscape.automatontest.domain.tables.MetaConfig;
import de.quinscape.automatontest.domain.tables.Node;
import de.quinscape.automatontest.domain.tables.Plugh;
import de.quinscape.automatontest.domain.tables.QuxA;
import de.quinscape.automatontest.domain.tables.QuxB;
import de.quinscape.automatontest.domain.tables.QuxC;
import de.quinscape.automatontest.domain.tables.QuxD;
import de.quinscape.automatontest.domain.tables.QuxE;
import de.quinscape.automatontest.domain.tables.QuxMain;
import de.quinscape.automatontest.domain.tables.QuxMid;
import de.quinscape.automatontest.domain.tables.QuxTop;
import de.quinscape.automatontest.domain.tables.Waldo;
import de.quinscape.automatontest.domain.tables.records.AppAttachmentDataRecord;
import de.quinscape.automatontest.domain.tables.records.AppAttachmentRecord;
import de.quinscape.automatontest.domain.tables.records.AppConfigRecord;
import de.quinscape.automatontest.domain.tables.records.AppLoginRecord;
import de.quinscape.automatontest.domain.tables.records.AppTranslationRecord;
import de.quinscape.automatontest.domain.tables.records.AppUserConfigRecord;
import de.quinscape.automatontest.domain.tables.records.AppUserRecord;
import de.quinscape.automatontest.domain.tables.records.AppVersionRecord;
import de.quinscape.automatontest.domain.tables.records.BazLinkRecord;
import de.quinscape.automatontest.domain.tables.records.BazRecord;
import de.quinscape.automatontest.domain.tables.records.BazValueRecord;
import de.quinscape.automatontest.domain.tables.records.CorgeAssocRecord;
import de.quinscape.automatontest.domain.tables.records.CorgeLinkRecord;
import de.quinscape.automatontest.domain.tables.records.CorgeRecord;
import de.quinscape.automatontest.domain.tables.records.CorgeTypeRecord;
import de.quinscape.automatontest.domain.tables.records.FooRecord;
import de.quinscape.automatontest.domain.tables.records.FooTypeRecord;
import de.quinscape.automatontest.domain.tables.records.GarplyRecord;
import de.quinscape.automatontest.domain.tables.records.GraultRecord;
import de.quinscape.automatontest.domain.tables.records.GridColumnsRecord;
import de.quinscape.automatontest.domain.tables.records.MetaConfigRecord;
import de.quinscape.automatontest.domain.tables.records.NodeRecord;
import de.quinscape.automatontest.domain.tables.records.PlughRecord;
import de.quinscape.automatontest.domain.tables.records.QuxARecord;
import de.quinscape.automatontest.domain.tables.records.QuxBRecord;
import de.quinscape.automatontest.domain.tables.records.QuxCRecord;
import de.quinscape.automatontest.domain.tables.records.QuxDRecord;
import de.quinscape.automatontest.domain.tables.records.QuxERecord;
import de.quinscape.automatontest.domain.tables.records.QuxMainRecord;
import de.quinscape.automatontest.domain.tables.records.QuxMidRecord;
import de.quinscape.automatontest.domain.tables.records.QuxTopRecord;
import de.quinscape.automatontest.domain.tables.records.WaldoRecord;

import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AppAttachmentRecord> PK_APP_ATTACHMENT = Internal.createUniqueKey(AppAttachment.APP_ATTACHMENT, DSL.name("pk_app_attachment"), new TableField[] { AppAttachment.APP_ATTACHMENT.ID }, true);
    public static final UniqueKey<AppAttachmentDataRecord> PK_APP_ATTACHMENT_DATA = Internal.createUniqueKey(AppAttachmentData.APP_ATTACHMENT_DATA, DSL.name("pk_app_attachment_data"), new TableField[] { AppAttachmentData.APP_ATTACHMENT_DATA.ID }, true);
    public static final UniqueKey<AppAttachmentDataRecord> UC_APP_ATTACHMENT_DATA_ATTACHMENT_ID = Internal.createUniqueKey(AppAttachmentData.APP_ATTACHMENT_DATA, DSL.name("uc_app_attachment_data_attachment_id"), new TableField[] { AppAttachmentData.APP_ATTACHMENT_DATA.ATTACHMENT_ID }, true);
    public static final UniqueKey<AppConfigRecord> PK_APP_CONFIG = Internal.createUniqueKey(AppConfig.APP_CONFIG, DSL.name("pk_app_config"), new TableField[] { AppConfig.APP_CONFIG.NAME }, true);
    public static final UniqueKey<AppLoginRecord> PK_APP_LOGIN = Internal.createUniqueKey(AppLogin.APP_LOGIN, DSL.name("pk_app_login"), new TableField[] { AppLogin.APP_LOGIN.SERIES }, true);
    public static final UniqueKey<AppTranslationRecord> PK_APP_TRANSLATION = Internal.createUniqueKey(AppTranslation.APP_TRANSLATION, DSL.name("pk_app_translation"), new TableField[] { AppTranslation.APP_TRANSLATION.ID }, true);
    public static final UniqueKey<AppTranslationRecord> UC_APP_TRANSLATION = Internal.createUniqueKey(AppTranslation.APP_TRANSLATION, DSL.name("uc_app_translation"), new TableField[] { AppTranslation.APP_TRANSLATION.LOCALE, AppTranslation.APP_TRANSLATION.TAG, AppTranslation.APP_TRANSLATION.PROCESS_NAME }, true);
    public static final UniqueKey<AppUserRecord> PK_APP_USER = Internal.createUniqueKey(AppUser.APP_USER, DSL.name("pk_app_user"), new TableField[] { AppUser.APP_USER.ID }, true);
    public static final UniqueKey<AppUserRecord> UC_APP_USER_LOGIN = Internal.createUniqueKey(AppUser.APP_USER, DSL.name("uc_app_user_login"), new TableField[] { AppUser.APP_USER.LOGIN }, true);
    public static final UniqueKey<AppUserConfigRecord> PK_APP_USER_CONFIG = Internal.createUniqueKey(AppUserConfig.APP_USER_CONFIG, DSL.name("pk_app_user_config"), new TableField[] { AppUserConfig.APP_USER_CONFIG.LOGIN }, true);
    public static final UniqueKey<AppVersionRecord> PK_APP_VERSION = Internal.createUniqueKey(AppVersion.APP_VERSION, DSL.name("pk_app_version"), new TableField[] { AppVersion.APP_VERSION.ID }, true);
    public static final UniqueKey<BazRecord> PK_BAZ = Internal.createUniqueKey(Baz.BAZ, DSL.name("pk_baz"), new TableField[] { Baz.BAZ.ID }, true);
    public static final UniqueKey<BazLinkRecord> BAZ_LINK_BAZ_ID_VALUE_ID_KEY = Internal.createUniqueKey(BazLink.BAZ_LINK, DSL.name("baz_link_baz_id_value_id_key"), new TableField[] { BazLink.BAZ_LINK.BAZ_ID, BazLink.BAZ_LINK.VALUE_ID }, true);
    public static final UniqueKey<BazLinkRecord> PK_BAZ_LINK = Internal.createUniqueKey(BazLink.BAZ_LINK, DSL.name("pk_baz_link"), new TableField[] { BazLink.BAZ_LINK.ID }, true);
    public static final UniqueKey<BazValueRecord> PK_BAZ_VALUE = Internal.createUniqueKey(BazValue.BAZ_VALUE, DSL.name("pk_baz_value"), new TableField[] { BazValue.BAZ_VALUE.ID }, true);
    public static final UniqueKey<CorgeRecord> PK_CORGE = Internal.createUniqueKey(Corge.CORGE, DSL.name("pk_corge"), new TableField[] { Corge.CORGE.ID }, true);
    public static final UniqueKey<CorgeAssocRecord> PK_CORGE_ASSOC = Internal.createUniqueKey(CorgeAssoc.CORGE_ASSOC, DSL.name("pk_corge_assoc"), new TableField[] { CorgeAssoc.CORGE_ASSOC.ID }, true);
    public static final UniqueKey<CorgeLinkRecord> PK_CORGE_LINK = Internal.createUniqueKey(CorgeLink.CORGE_LINK, DSL.name("pk_corge_link"), new TableField[] { CorgeLink.CORGE_LINK.ID }, true);
    public static final UniqueKey<CorgeTypeRecord> PK_CORGE_TYPE = Internal.createUniqueKey(CorgeType.CORGE_TYPE, DSL.name("pk_corge_type"), new TableField[] { CorgeType.CORGE_TYPE.ID }, true);
    public static final UniqueKey<FooRecord> PK_FOO = Internal.createUniqueKey(Foo.FOO, DSL.name("pk_foo"), new TableField[] { Foo.FOO.ID }, true);
    public static final UniqueKey<FooTypeRecord> FOO_TYPE_NAME_KEY = Internal.createUniqueKey(FooType.FOO_TYPE, DSL.name("foo_type_name_key"), new TableField[] { FooType.FOO_TYPE.NAME }, true);
    public static final UniqueKey<FooTypeRecord> PK_FOO_TYPE = Internal.createUniqueKey(FooType.FOO_TYPE, DSL.name("pk_foo_type"), new TableField[] { FooType.FOO_TYPE.ORDINAL }, true);
    public static final UniqueKey<GarplyRecord> PK_GARPLY = Internal.createUniqueKey(Garply.GARPLY, DSL.name("pk_garply"), new TableField[] { Garply.GARPLY.ID }, true);
    public static final UniqueKey<GraultRecord> PK_GRAULT = Internal.createUniqueKey(Grault.GRAULT, DSL.name("pk_grault"), new TableField[] { Grault.GRAULT.ID }, true);
    public static final UniqueKey<GridColumnsRecord> GRID_COLUMNS_NAME_OWNER_ID_KEY = Internal.createUniqueKey(GridColumns.GRID_COLUMNS, DSL.name("grid_columns_name_owner_id_key"), new TableField[] { GridColumns.GRID_COLUMNS.NAME, GridColumns.GRID_COLUMNS.OWNER_ID }, true);
    public static final UniqueKey<GridColumnsRecord> PK_GRID_COLUMNS = Internal.createUniqueKey(GridColumns.GRID_COLUMNS, DSL.name("pk_grid_columns"), new TableField[] { GridColumns.GRID_COLUMNS.ID }, true);
    public static final UniqueKey<MetaConfigRecord> PK_META_CONFIG = Internal.createUniqueKey(MetaConfig.META_CONFIG, DSL.name("pk_meta_config"), new TableField[] { MetaConfig.META_CONFIG.ID }, true);
    public static final UniqueKey<NodeRecord> PK_NODE = Internal.createUniqueKey(Node.NODE, DSL.name("pk_node"), new TableField[] { Node.NODE.ID }, true);
    public static final UniqueKey<NodeRecord> UC_NODE_NAME = Internal.createUniqueKey(Node.NODE, DSL.name("uc_node_name"), new TableField[] { Node.NODE.NAME }, true);
    public static final UniqueKey<PlughRecord> PK_PLUGH = Internal.createUniqueKey(Plugh.PLUGH, DSL.name("pk_plugh"), new TableField[] { Plugh.PLUGH.ID }, true);
    public static final UniqueKey<QuxARecord> PK_QUX_A = Internal.createUniqueKey(QuxA.QUX_A, DSL.name("pk_qux_a"), new TableField[] { QuxA.QUX_A.ID }, true);
    public static final UniqueKey<QuxARecord> QUX_A_NAME_KEY = Internal.createUniqueKey(QuxA.QUX_A, DSL.name("qux_a_name_key"), new TableField[] { QuxA.QUX_A.NAME }, true);
    public static final UniqueKey<QuxBRecord> PK_QUX_B = Internal.createUniqueKey(QuxB.QUX_B, DSL.name("pk_qux_b"), new TableField[] { QuxB.QUX_B.ID }, true);
    public static final UniqueKey<QuxBRecord> QUX_B_NAME_KEY = Internal.createUniqueKey(QuxB.QUX_B, DSL.name("qux_b_name_key"), new TableField[] { QuxB.QUX_B.NAME }, true);
    public static final UniqueKey<QuxCRecord> PK_QUX_C = Internal.createUniqueKey(QuxC.QUX_C, DSL.name("pk_qux_c"), new TableField[] { QuxC.QUX_C.ID }, true);
    public static final UniqueKey<QuxCRecord> QUX_C_NAME_KEY = Internal.createUniqueKey(QuxC.QUX_C, DSL.name("qux_c_name_key"), new TableField[] { QuxC.QUX_C.NAME }, true);
    public static final UniqueKey<QuxDRecord> PK_QUX_D = Internal.createUniqueKey(QuxD.QUX_D, DSL.name("pk_qux_d"), new TableField[] { QuxD.QUX_D.ID }, true);
    public static final UniqueKey<QuxDRecord> QUX_D_NAME_KEY = Internal.createUniqueKey(QuxD.QUX_D, DSL.name("qux_d_name_key"), new TableField[] { QuxD.QUX_D.NAME }, true);
    public static final UniqueKey<QuxERecord> PK_QUX_E = Internal.createUniqueKey(QuxE.QUX_E, DSL.name("pk_qux_e"), new TableField[] { QuxE.QUX_E.ID }, true);
    public static final UniqueKey<QuxERecord> QUX_E_NAME_KEY = Internal.createUniqueKey(QuxE.QUX_E, DSL.name("qux_e_name_key"), new TableField[] { QuxE.QUX_E.NAME }, true);
    public static final UniqueKey<QuxMainRecord> PK_QUX_MAIN = Internal.createUniqueKey(QuxMain.QUX_MAIN, DSL.name("pk_qux_main"), new TableField[] { QuxMain.QUX_MAIN.ID }, true);
    public static final UniqueKey<QuxMidRecord> PK_QUX_MID = Internal.createUniqueKey(QuxMid.QUX_MID, DSL.name("pk_qux_mid"), new TableField[] { QuxMid.QUX_MID.ID }, true);
    public static final UniqueKey<QuxMidRecord> QUX_MID_NAME_KEY = Internal.createUniqueKey(QuxMid.QUX_MID, DSL.name("qux_mid_name_key"), new TableField[] { QuxMid.QUX_MID.NAME }, true);
    public static final UniqueKey<QuxTopRecord> PK_QUX_TOP = Internal.createUniqueKey(QuxTop.QUX_TOP, DSL.name("pk_qux_top"), new TableField[] { QuxTop.QUX_TOP.ID }, true);
    public static final UniqueKey<WaldoRecord> PK_WALDO = Internal.createUniqueKey(Waldo.WALDO, DSL.name("pk_waldo"), new TableField[] { Waldo.WALDO.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AppAttachmentDataRecord, AppAttachmentRecord> APP_ATTACHMENT_DATA__FK_APP_ATTACHMENT_DATA_ATTACHMENT_ID = Internal.createForeignKey(AppAttachmentData.APP_ATTACHMENT_DATA, DSL.name("fk_app_attachment_data_attachment_id"), new TableField[] { AppAttachmentData.APP_ATTACHMENT_DATA.ATTACHMENT_ID }, Keys.PK_APP_ATTACHMENT, new TableField[] { AppAttachment.APP_ATTACHMENT.ID }, true);
    public static final ForeignKey<AppUserConfigRecord, AppAttachmentRecord> APP_USER_CONFIG__FK_APP_USER_CONFIG_ATTACHMENT_ID = Internal.createForeignKey(AppUserConfig.APP_USER_CONFIG, DSL.name("fk_app_user_config_attachment_id"), new TableField[] { AppUserConfig.APP_USER_CONFIG.ATTACHMENT_ID }, Keys.PK_APP_ATTACHMENT, new TableField[] { AppAttachment.APP_ATTACHMENT.ID }, true);
    public static final ForeignKey<AppUserConfigRecord, AppUserRecord> APP_USER_CONFIG__FK_APP_USER_CONFIG_USER_ID = Internal.createForeignKey(AppUserConfig.APP_USER_CONFIG, DSL.name("fk_app_user_config_user_id"), new TableField[] { AppUserConfig.APP_USER_CONFIG.USER_ID }, Keys.PK_APP_USER, new TableField[] { AppUser.APP_USER.ID }, true);
    public static final ForeignKey<AppVersionRecord, AppUserRecord> APP_VERSION__FK_APP_VERSION_OWNER_ID = Internal.createForeignKey(AppVersion.APP_VERSION, DSL.name("fk_app_version_owner_id"), new TableField[] { AppVersion.APP_VERSION.OWNER_ID }, Keys.PK_APP_USER, new TableField[] { AppUser.APP_USER.ID }, true);
    public static final ForeignKey<BazRecord, AppUserRecord> BAZ__FK_BAZ_OWNER_ID = Internal.createForeignKey(Baz.BAZ, DSL.name("fk_baz_owner_id"), new TableField[] { Baz.BAZ.OWNER_ID }, Keys.PK_APP_USER, new TableField[] { AppUser.APP_USER.ID }, true);
    public static final ForeignKey<BazLinkRecord, BazRecord> BAZ_LINK__FK_BAZ_LINK_BAZ_ID = Internal.createForeignKey(BazLink.BAZ_LINK, DSL.name("fk_baz_link_baz_id"), new TableField[] { BazLink.BAZ_LINK.BAZ_ID }, Keys.PK_BAZ, new TableField[] { Baz.BAZ.ID }, true);
    public static final ForeignKey<BazLinkRecord, BazValueRecord> BAZ_LINK__FK_BAZ_LINK_VALUE_ID = Internal.createForeignKey(BazLink.BAZ_LINK, DSL.name("fk_baz_link_value_id"), new TableField[] { BazLink.BAZ_LINK.VALUE_ID }, Keys.PK_BAZ_VALUE, new TableField[] { BazValue.BAZ_VALUE.ID }, true);
    public static final ForeignKey<CorgeRecord, AppUserRecord> CORGE__FK_CORGE_OWNER_ID = Internal.createForeignKey(Corge.CORGE, DSL.name("fk_corge_owner_id"), new TableField[] { Corge.CORGE.OWNER_ID }, Keys.PK_APP_USER, new TableField[] { AppUser.APP_USER.ID }, true);
    public static final ForeignKey<CorgeRecord, CorgeTypeRecord> CORGE__FK_CORGE_TYPE2 = Internal.createForeignKey(Corge.CORGE, DSL.name("fk_corge_type2"), new TableField[] { Corge.CORGE.TYPE2 }, Keys.PK_CORGE_TYPE, new TableField[] { CorgeType.CORGE_TYPE.ID }, true);
    public static final ForeignKey<CorgeRecord, CorgeTypeRecord> CORGE__FK_CORGE_TYPE_ID = Internal.createForeignKey(Corge.CORGE, DSL.name("fk_corge_type_id"), new TableField[] { Corge.CORGE.TYPE_ID }, Keys.PK_CORGE_TYPE, new TableField[] { CorgeType.CORGE_TYPE.ID }, true);
    public static final ForeignKey<CorgeLinkRecord, CorgeAssocRecord> CORGE_LINK__FK_CORGE_LINK_ASSOC = Internal.createForeignKey(CorgeLink.CORGE_LINK, DSL.name("fk_corge_link_assoc"), new TableField[] { CorgeLink.CORGE_LINK.ASSOC_ID }, Keys.PK_CORGE_ASSOC, new TableField[] { CorgeAssoc.CORGE_ASSOC.ID }, true);
    public static final ForeignKey<CorgeLinkRecord, CorgeRecord> CORGE_LINK__FK_CORGE_LINK_CORGE = Internal.createForeignKey(CorgeLink.CORGE_LINK, DSL.name("fk_corge_link_corge"), new TableField[] { CorgeLink.CORGE_LINK.CORGE_ID }, Keys.PK_CORGE, new TableField[] { Corge.CORGE.ID }, true);
    public static final ForeignKey<FooRecord, AppUserRecord> FOO__FK_FOO_OWNER_ID = Internal.createForeignKey(Foo.FOO, DSL.name("fk_foo_owner_id"), new TableField[] { Foo.FOO.OWNER_ID }, Keys.PK_APP_USER, new TableField[] { AppUser.APP_USER.ID }, true);
    public static final ForeignKey<FooRecord, FooTypeRecord> FOO__FK_FOO_TYPE_ID = Internal.createForeignKey(Foo.FOO, DSL.name("fk_foo_type_id"), new TableField[] { Foo.FOO.TYPE }, Keys.FOO_TYPE_NAME_KEY, new TableField[] { FooType.FOO_TYPE.NAME }, true);
    public static final ForeignKey<GraultRecord, AppAttachmentRecord> GRAULT__FK_GRAULT_ATTACHMENT_ID = Internal.createForeignKey(Grault.GRAULT, DSL.name("fk_grault_attachment_id"), new TableField[] { Grault.GRAULT.ATTACHMENT_ID }, Keys.PK_APP_ATTACHMENT, new TableField[] { AppAttachment.APP_ATTACHMENT.ID }, true);
    public static final ForeignKey<GridColumnsRecord, AppUserRecord> GRID_COLUMNS__FK_GRID_COLUMNS_OWNER_ID = Internal.createForeignKey(GridColumns.GRID_COLUMNS, DSL.name("fk_grid_columns_owner_id"), new TableField[] { GridColumns.GRID_COLUMNS.OWNER_ID }, Keys.PK_APP_USER, new TableField[] { AppUser.APP_USER.ID }, true);
    public static final ForeignKey<MetaConfigRecord, AppAttachmentRecord> META_CONFIG__FK_META_CONFIG_ATTACHMENT_ID = Internal.createForeignKey(MetaConfig.META_CONFIG, DSL.name("fk_meta_config_attachment_id"), new TableField[] { MetaConfig.META_CONFIG.ATTACHMENT_ID }, Keys.PK_APP_ATTACHMENT, new TableField[] { AppAttachment.APP_ATTACHMENT.ID }, true);
    public static final ForeignKey<MetaConfigRecord, CorgeTypeRecord> META_CONFIG__FK_META_CONFIG_CORGE_TYPE_ID = Internal.createForeignKey(MetaConfig.META_CONFIG, DSL.name("fk_meta_config_corge_type_id"), new TableField[] { MetaConfig.META_CONFIG.CORGE_TYPE_ID }, Keys.PK_CORGE_TYPE, new TableField[] { CorgeType.CORGE_TYPE.ID }, true);
    public static final ForeignKey<MetaConfigRecord, FooTypeRecord> META_CONFIG__FK_META_CONFIG_TYPE_ID = Internal.createForeignKey(MetaConfig.META_CONFIG, DSL.name("fk_meta_config_type_id"), new TableField[] { MetaConfig.META_CONFIG.TYPE }, Keys.FOO_TYPE_NAME_KEY, new TableField[] { FooType.FOO_TYPE.NAME }, true);
    public static final ForeignKey<NodeRecord, NodeRecord> NODE__FK_NODE_PARENT_ID = Internal.createForeignKey(Node.NODE, DSL.name("fk_node_parent_id"), new TableField[] { Node.NODE.PARENT_ID }, Keys.PK_NODE, new TableField[] { Node.NODE.ID }, true);
    public static final ForeignKey<PlughRecord, AppUserRecord> PLUGH__FK_PLUGH_OWNER_ID = Internal.createForeignKey(Plugh.PLUGH, DSL.name("fk_plugh_owner_id"), new TableField[] { Plugh.PLUGH.OWNER_ID }, Keys.PK_APP_USER, new TableField[] { AppUser.APP_USER.ID }, true);
    public static final ForeignKey<QuxMainRecord, QuxARecord> QUX_MAIN__FK_QUX_A_ID = Internal.createForeignKey(QuxMain.QUX_MAIN, DSL.name("fk_qux_a_id"), new TableField[] { QuxMain.QUX_MAIN.QUX_A_ID }, Keys.PK_QUX_A, new TableField[] { QuxA.QUX_A.ID }, true);
    public static final ForeignKey<QuxMainRecord, QuxBRecord> QUX_MAIN__FK_QUX_B_NAME = Internal.createForeignKey(QuxMain.QUX_MAIN, DSL.name("fk_qux_b_name"), new TableField[] { QuxMain.QUX_MAIN.QUX_B_NAME }, Keys.QUX_B_NAME_KEY, new TableField[] { QuxB.QUX_B.NAME }, true);
    public static final ForeignKey<QuxMainRecord, QuxCRecord> QUX_MAIN__FK_QUX_C_ID1 = Internal.createForeignKey(QuxMain.QUX_MAIN, DSL.name("fk_qux_c_id1"), new TableField[] { QuxMain.QUX_MAIN.QUX_C_ID1 }, Keys.PK_QUX_C, new TableField[] { QuxC.QUX_C.ID }, true);
    public static final ForeignKey<QuxMainRecord, QuxCRecord> QUX_MAIN__FK_QUX_C_ID2 = Internal.createForeignKey(QuxMain.QUX_MAIN, DSL.name("fk_qux_c_id2"), new TableField[] { QuxMain.QUX_MAIN.QUX_C_ID2 }, Keys.PK_QUX_C, new TableField[] { QuxC.QUX_C.ID }, true);
    public static final ForeignKey<QuxMainRecord, QuxDRecord> QUX_MAIN__FK_QUX_D2_ID = Internal.createForeignKey(QuxMain.QUX_MAIN, DSL.name("fk_qux_d2_id"), new TableField[] { QuxMain.QUX_MAIN.QUX_D2_ID }, Keys.PK_QUX_D, new TableField[] { QuxD.QUX_D.ID }, true);
    public static final ForeignKey<QuxMainRecord, QuxDRecord> QUX_MAIN__FK_QUX_D3_ID = Internal.createForeignKey(QuxMain.QUX_MAIN, DSL.name("fk_qux_d3_id"), new TableField[] { QuxMain.QUX_MAIN.QUX_D3_ID }, Keys.PK_QUX_D, new TableField[] { QuxD.QUX_D.ID }, true);
    public static final ForeignKey<QuxMainRecord, QuxDRecord> QUX_MAIN__FK_QUX_D4_ID = Internal.createForeignKey(QuxMain.QUX_MAIN, DSL.name("fk_qux_d4_id"), new TableField[] { QuxMain.QUX_MAIN.QUX_D4_ID }, Keys.PK_QUX_D, new TableField[] { QuxD.QUX_D.ID }, true);
    public static final ForeignKey<QuxMainRecord, QuxDRecord> QUX_MAIN__FK_QUX_D_ID = Internal.createForeignKey(QuxMain.QUX_MAIN, DSL.name("fk_qux_d_id"), new TableField[] { QuxMain.QUX_MAIN.QUX_D_ID }, Keys.PK_QUX_D, new TableField[] { QuxD.QUX_D.ID }, true);
    public static final ForeignKey<QuxMidRecord, QuxERecord> QUX_MID__FK_QUX_E_ID = Internal.createForeignKey(QuxMid.QUX_MID, DSL.name("fk_qux_e_id"), new TableField[] { QuxMid.QUX_MID.QUX_E_ID }, Keys.PK_QUX_E, new TableField[] { QuxE.QUX_E.ID }, true);
    public static final ForeignKey<QuxTopRecord, QuxMidRecord> QUX_TOP__FK_QUX_MID_ID = Internal.createForeignKey(QuxTop.QUX_TOP, DSL.name("fk_qux_mid_id"), new TableField[] { QuxTop.QUX_TOP.QUX_MID_ID }, Keys.PK_QUX_MID, new TableField[] { QuxMid.QUX_MID.ID }, true);
}
