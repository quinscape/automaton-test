/*
 * This file is generated by jOOQ.
 */
package de.quinscape.automatontest.domain.tables.pojos;


import de.quinscape.domainql.jooq.GeneratedDomainObject;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.util.Arrays;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "app_attachment_data",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "uc_app_attachment_data_attachment_id", columnNames = { "attachment_id" })
    }
)
public class AppAttachmentData extends GeneratedDomainObject implements Serializable {

    private static final long serialVersionUID = 1L;

    private String id;
    private String attachmentId;
    private byte[] data;

    public AppAttachmentData() {}

    public AppAttachmentData(AppAttachmentData value) {
        this.id = value.id;
        this.attachmentId = value.attachmentId;
        this.data = value.data;
    }

    public AppAttachmentData(
        String id,
        String attachmentId,
        byte[] data
    ) {
        this.id = id;
        this.attachmentId = attachmentId;
        this.data = data;
    }

    /**
     * Getter for <code>public.app_attachment_data.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.app_attachment_data.id</code>.
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for <code>public.app_attachment_data.attachment_id</code>.
     */
    @Column(name = "attachment_id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getAttachmentId() {
        return this.attachmentId;
    }

    /**
     * Setter for <code>public.app_attachment_data.attachment_id</code>.
     */
    public void setAttachmentId(String attachmentId) {
        this.attachmentId = attachmentId;
    }

    /**
     * Getter for <code>public.app_attachment_data.data</code>.
     */
    @Column(name = "data", nullable = false)
    @NotNull
    public byte[] getData() {
        return this.data;
    }

    /**
     * Setter for <code>public.app_attachment_data.data</code>.
     */
    public void setData(byte[] data) {
        this.data = data;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final AppAttachmentData other = (AppAttachmentData) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.attachmentId == null) {
            if (other.attachmentId != null)
                return false;
        }
        else if (!this.attachmentId.equals(other.attachmentId))
            return false;
        if (this.data == null) {
            if (other.data != null)
                return false;
        }
        else if (!Arrays.equals(this.data, other.data))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.attachmentId == null) ? 0 : this.attachmentId.hashCode());
        result = prime * result + ((this.data == null) ? 0 : Arrays.hashCode(this.data));
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AppAttachmentData (");

        sb.append(id);
        sb.append(", ").append(attachmentId);
        sb.append(", ").append("[binary...]");

        sb.append(")");
        return sb.toString();
    }
}
