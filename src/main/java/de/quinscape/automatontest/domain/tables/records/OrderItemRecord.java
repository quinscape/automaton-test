/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables.records;


import de.quinscape.automatontest.domain.tables.OrderItem;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "order_item", schema = "public", indexes = {
    @Index(name = "pk_order_item", unique = true, columnList = "id ASC")
})
public class OrderItemRecord extends UpdatableRecordImpl<OrderItemRecord> implements Record4<String, Integer, String, String> {

    private static final long serialVersionUID = 2114723230;

    /**
     * Setter for <code>public.order_item.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.order_item.id</code>.
     */
    @Id
    @Column(name = "id", unique = true, nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.order_item.quantity</code>.
     */
    public void setQuantity(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.order_item.quantity</code>.
     */
    @Column(name = "quantity", nullable = false, precision = 32)
    @NotNull
    public Integer getQuantity() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.order_item.product_id</code>.
     */
    public void setProductId(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.order_item.product_id</code>.
     */
    @Column(name = "product_id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getProductId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.order_item.order_id</code>.
     */
    public void setOrderId(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.order_item.order_id</code>.
     */
    @Column(name = "order_id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getOrderId() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, Integer, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return OrderItem.ORDER_ITEM.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return OrderItem.ORDER_ITEM.QUANTITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return OrderItem.ORDER_ITEM.PRODUCT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return OrderItem.ORDER_ITEM.ORDER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getQuantity();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getProductId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getOrderId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getQuantity();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getProductId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getOrderId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderItemRecord value1(String value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderItemRecord value2(Integer value) {
        setQuantity(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderItemRecord value3(String value) {
        setProductId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderItemRecord value4(String value) {
        setOrderId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderItemRecord values(String value1, Integer value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrderItemRecord
     */
    public OrderItemRecord() {
        super(OrderItem.ORDER_ITEM);
    }

    /**
     * Create a detached, initialised OrderItemRecord
     */
    public OrderItemRecord(String id, Integer quantity, String productId, String orderId) {
        super(OrderItem.ORDER_ITEM);

        set(0, id);
        set(1, quantity);
        set(2, productId);
        set(3, orderId);
    }
}
