/*
 * This file is generated by jOOQ.
 */
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.AppVersionRecord;

import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppVersion extends TableImpl<AppVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.app_version</code>
     */
    public static final AppVersion APP_VERSION = new AppVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppVersionRecord> getRecordType() {
        return AppVersionRecord.class;
    }

    /**
     * The column <code>public.app_version.id</code>.
     */
    public final TableField<AppVersionRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.app_version.field_mask</code>.
     */
    public final TableField<AppVersionRecord, BigInteger> FIELD_MASK = createField(DSL.name("field_mask"), SQLDataType.DECIMAL_INTEGER(39).nullable(false), this, "");

    /**
     * The column <code>public.app_version.owner_id</code>.
     */
    public final TableField<AppVersionRecord, String> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.app_version.created</code>.
     */
    public final TableField<AppVersionRecord, Timestamp> CREATED = createField(DSL.name("created"), SQLDataType.TIMESTAMP(6).nullable(false), this, "");

    /**
     * The column <code>public.app_version.entity_type</code>.
     */
    public final TableField<AppVersionRecord, String> ENTITY_TYPE = createField(DSL.name("entity_type"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.app_version.entity_id</code>.
     */
    public final TableField<AppVersionRecord, String> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.app_version.prev</code>.
     */
    public final TableField<AppVersionRecord, String> PREV = createField(DSL.name("prev"), SQLDataType.VARCHAR(36), this, "");

    private AppVersion(Name alias, Table<AppVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppVersion(Name alias, Table<AppVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.app_version</code> table reference
     */
    public AppVersion(String alias) {
        this(DSL.name(alias), APP_VERSION);
    }

    /**
     * Create an aliased <code>public.app_version</code> table reference
     */
    public AppVersion(Name alias) {
        this(alias, APP_VERSION);
    }

    /**
     * Create a <code>public.app_version</code> table reference
     */
    public AppVersion() {
        this(DSL.name("app_version"), null);
    }

    public <O extends Record> AppVersion(Table<O> child, ForeignKey<O, AppVersionRecord> key) {
        super(child, key, APP_VERSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AppVersionRecord> getPrimaryKey() {
        return Keys.PK_APP_VERSION;
    }

    @Override
    public List<ForeignKey<AppVersionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.APP_VERSION__FK_APP_VERSION_OWNER_ID);
    }

    private transient AppUser _appUser;

    /**
     * Get the implicit join path to the <code>public.app_user</code> table.
     */
    public AppUser appUser() {
        if (_appUser == null)
            _appUser = new AppUser(this, Keys.APP_VERSION__FK_APP_VERSION_OWNER_ID);

        return _appUser;
    }

    @Override
    public AppVersion as(String alias) {
        return new AppVersion(DSL.name(alias), this);
    }

    @Override
    public AppVersion as(Name alias) {
        return new AppVersion(alias, this);
    }

    @Override
    public AppVersion as(Table<?> alias) {
        return new AppVersion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppVersion rename(String name) {
        return new AppVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppVersion rename(Name name) {
        return new AppVersion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppVersion rename(Table<?> name) {
        return new AppVersion(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, BigInteger, String, Timestamp, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super BigInteger, ? super String, ? super Timestamp, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super BigInteger, ? super String, ? super Timestamp, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
