/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Indexes;
import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.AppAttachmentDataRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppAttachmentData extends TableImpl<AppAttachmentDataRecord> {

    private static final long serialVersionUID = 968002105;

    /**
     * The reference instance of <code>public.app_attachment_data</code>
     */
    public static final AppAttachmentData APP_ATTACHMENT_DATA = new AppAttachmentData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppAttachmentDataRecord> getRecordType() {
        return AppAttachmentDataRecord.class;
    }

    /**
     * The column <code>public.app_attachment_data.id</code>.
     */
    public final TableField<AppAttachmentDataRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.app_attachment_data.attachment_id</code>.
     */
    public final TableField<AppAttachmentDataRecord, String> ATTACHMENT_ID = createField("attachment_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.app_attachment_data.data</code>.
     */
    public final TableField<AppAttachmentDataRecord, byte[]> DATA = createField("data", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * Create a <code>public.app_attachment_data</code> table reference
     */
    public AppAttachmentData() {
        this(DSL.name("app_attachment_data"), null);
    }

    /**
     * Create an aliased <code>public.app_attachment_data</code> table reference
     */
    public AppAttachmentData(String alias) {
        this(DSL.name(alias), APP_ATTACHMENT_DATA);
    }

    /**
     * Create an aliased <code>public.app_attachment_data</code> table reference
     */
    public AppAttachmentData(Name alias) {
        this(alias, APP_ATTACHMENT_DATA);
    }

    private AppAttachmentData(Name alias, Table<AppAttachmentDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppAttachmentData(Name alias, Table<AppAttachmentDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_APP_ATTACHMENT_DATA, Indexes.UC_APP_ATTACHMENT_DATA_ATTACHMENT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AppAttachmentDataRecord> getPrimaryKey() {
        return Keys.PK_APP_ATTACHMENT_DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AppAttachmentDataRecord>> getKeys() {
        return Arrays.<UniqueKey<AppAttachmentDataRecord>>asList(Keys.PK_APP_ATTACHMENT_DATA, Keys.UC_APP_ATTACHMENT_DATA_ATTACHMENT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AppAttachmentDataRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AppAttachmentDataRecord, ?>>asList(Keys.APP_ATTACHMENT_DATA__FK_APP_ATTACHMENT_DATA_ATTACHMENT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppAttachmentData as(String alias) {
        return new AppAttachmentData(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppAttachmentData as(Name alias) {
        return new AppAttachmentData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppAttachmentData rename(String name) {
        return new AppAttachmentData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppAttachmentData rename(Name name) {
        return new AppAttachmentData(name, null);
    }
}
