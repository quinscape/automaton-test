/*
 * This file is generated by jOOQ.
 */
package de.quinscape.automatontest.domain.tables.pojos;


import de.quinscape.domainql.jooq.GeneratedDomainObject;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "app_translation",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "uc_app_translation", columnNames = { "locale", "tag", "process_name" })
    }
)
public class AppTranslation extends GeneratedDomainObject implements Serializable {

    private static final long serialVersionUID = 1L;

    private String id;
    private String locale;
    private String tag;
    private String processName;
    private String translation;
    private Timestamp created;
    private Timestamp modified;

    public AppTranslation() {}

    public AppTranslation(AppTranslation value) {
        this.id = value.id;
        this.locale = value.locale;
        this.tag = value.tag;
        this.processName = value.processName;
        this.translation = value.translation;
        this.created = value.created;
        this.modified = value.modified;
    }

    public AppTranslation(
        String id,
        String locale,
        String tag,
        String processName,
        String translation,
        Timestamp created,
        Timestamp modified
    ) {
        this.id = id;
        this.locale = locale;
        this.tag = tag;
        this.processName = processName;
        this.translation = translation;
        this.created = created;
        this.modified = modified;
    }

    /**
     * Getter for <code>public.app_translation.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.app_translation.id</code>.
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for <code>public.app_translation.locale</code>.
     */
    @Column(name = "locale", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    public String getLocale() {
        return this.locale;
    }

    /**
     * Setter for <code>public.app_translation.locale</code>.
     */
    public void setLocale(String locale) {
        this.locale = locale;
    }

    /**
     * Getter for <code>public.app_translation.tag</code>.
     */
    @Column(name = "tag", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    public String getTag() {
        return this.tag;
    }

    /**
     * Setter for <code>public.app_translation.tag</code>.
     */
    public void setTag(String tag) {
        this.tag = tag;
    }

    /**
     * Getter for <code>public.app_translation.process_name</code>.
     */
    @Column(name = "process_name", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    public String getProcessName() {
        return this.processName;
    }

    /**
     * Setter for <code>public.app_translation.process_name</code>.
     */
    public void setProcessName(String processName) {
        this.processName = processName;
    }

    /**
     * Getter for <code>public.app_translation.translation</code>.
     */
    @Column(name = "translation", nullable = false)
    @NotNull
    public String getTranslation() {
        return this.translation;
    }

    /**
     * Setter for <code>public.app_translation.translation</code>.
     */
    public void setTranslation(String translation) {
        this.translation = translation;
    }

    /**
     * Getter for <code>public.app_translation.created</code>.
     */
    @Column(name = "created", nullable = false, precision = 6)
    @NotNull
    public Timestamp getCreated() {
        return this.created;
    }

    /**
     * Setter for <code>public.app_translation.created</code>.
     */
    public void setCreated(Timestamp created) {
        this.created = created;
    }

    /**
     * Getter for <code>public.app_translation.modified</code>.
     */
    @Column(name = "modified", nullable = false, precision = 6)
    @NotNull
    public Timestamp getModified() {
        return this.modified;
    }

    /**
     * Setter for <code>public.app_translation.modified</code>.
     */
    public void setModified(Timestamp modified) {
        this.modified = modified;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final AppTranslation other = (AppTranslation) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.locale == null) {
            if (other.locale != null)
                return false;
        }
        else if (!this.locale.equals(other.locale))
            return false;
        if (this.tag == null) {
            if (other.tag != null)
                return false;
        }
        else if (!this.tag.equals(other.tag))
            return false;
        if (this.processName == null) {
            if (other.processName != null)
                return false;
        }
        else if (!this.processName.equals(other.processName))
            return false;
        if (this.translation == null) {
            if (other.translation != null)
                return false;
        }
        else if (!this.translation.equals(other.translation))
            return false;
        if (this.created == null) {
            if (other.created != null)
                return false;
        }
        else if (!this.created.equals(other.created))
            return false;
        if (this.modified == null) {
            if (other.modified != null)
                return false;
        }
        else if (!this.modified.equals(other.modified))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.locale == null) ? 0 : this.locale.hashCode());
        result = prime * result + ((this.tag == null) ? 0 : this.tag.hashCode());
        result = prime * result + ((this.processName == null) ? 0 : this.processName.hashCode());
        result = prime * result + ((this.translation == null) ? 0 : this.translation.hashCode());
        result = prime * result + ((this.created == null) ? 0 : this.created.hashCode());
        result = prime * result + ((this.modified == null) ? 0 : this.modified.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AppTranslation (");

        sb.append(id);
        sb.append(", ").append(locale);
        sb.append(", ").append(tag);
        sb.append(", ").append(processName);
        sb.append(", ").append(translation);
        sb.append(", ").append(created);
        sb.append(", ").append(modified);

        sb.append(")");
        return sb.toString();
    }
}
