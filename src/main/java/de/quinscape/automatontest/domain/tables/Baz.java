/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Indexes;
import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.BazRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Baz extends TableImpl<BazRecord> {

    private static final long serialVersionUID = -376178525;

    /**
     * The reference instance of <code>public.baz</code>
     */
    public static final Baz BAZ = new Baz();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BazRecord> getRecordType() {
        return BazRecord.class;
    }

    /**
     * The column <code>public.baz.id</code>.
     */
    public final TableField<BazRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.baz.name</code>.
     */
    public final TableField<BazRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.baz.owner_id</code>.
     */
    public final TableField<BazRecord, String> OWNER_ID = createField("owner_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * Create a <code>public.baz</code> table reference
     */
    public Baz() {
        this(DSL.name("baz"), null);
    }

    /**
     * Create an aliased <code>public.baz</code> table reference
     */
    public Baz(String alias) {
        this(DSL.name(alias), BAZ);
    }

    /**
     * Create an aliased <code>public.baz</code> table reference
     */
    public Baz(Name alias) {
        this(alias, BAZ);
    }

    private Baz(Name alias, Table<BazRecord> aliased) {
        this(alias, aliased, null);
    }

    private Baz(Name alias, Table<BazRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FKI_BAZ_OWNER_ID, Indexes.PK_BAZ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BazRecord> getPrimaryKey() {
        return Keys.PK_BAZ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BazRecord>> getKeys() {
        return Arrays.<UniqueKey<BazRecord>>asList(Keys.PK_BAZ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BazRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BazRecord, ?>>asList(Keys.BAZ__FK_BAZ_OWNER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Baz as(String alias) {
        return new Baz(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Baz as(Name alias) {
        return new Baz(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Baz rename(String name) {
        return new Baz(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Baz rename(Name name) {
        return new Baz(name, null);
    }
}
