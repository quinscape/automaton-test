/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables.pojos;


import de.quinscape.domainql.jooq.GeneratedDomainObject;

import java.io.Serializable;
import java.math.BigInteger;
import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "app_version", schema = "public", indexes = {
    @Index(name = "pk_app_version", unique = true, columnList = "id ASC")
})
public class AppVersion extends GeneratedDomainObject implements Serializable {

    private static final long serialVersionUID = 1727843279;

    private String     id;
    private BigInteger fieldMask;
    private String     ownerId;
    private Timestamp  created;
    private String     entityType;
    private String     entityId;
    private String     prev;

    public AppVersion() {}

    public AppVersion(AppVersion value) {
        this.id = value.id;
        this.fieldMask = value.fieldMask;
        this.ownerId = value.ownerId;
        this.created = value.created;
        this.entityType = value.entityType;
        this.entityId = value.entityId;
        this.prev = value.prev;
    }

    public AppVersion(
        String     id,
        BigInteger fieldMask,
        String     ownerId,
        Timestamp  created,
        String     entityType,
        String     entityId,
        String     prev
    ) {
        this.id = id;
        this.fieldMask = fieldMask;
        this.ownerId = ownerId;
        this.created = created;
        this.entityType = entityType;
        this.entityId = entityId;
        this.prev = prev;
    }

    @Id
    @Column(name = "id", unique = true, nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @Column(name = "field_mask", nullable = false, precision = 39)
    @NotNull
    public BigInteger getFieldMask() {
        return this.fieldMask;
    }

    public void setFieldMask(BigInteger fieldMask) {
        this.fieldMask = fieldMask;
    }

    @Column(name = "owner_id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getOwnerId() {
        return this.ownerId;
    }

    public void setOwnerId(String ownerId) {
        this.ownerId = ownerId;
    }

    @Column(name = "created", nullable = false)
    @NotNull
    public Timestamp getCreated() {
        return this.created;
    }

    public void setCreated(Timestamp created) {
        this.created = created;
    }

    @Column(name = "entity_type", nullable = false, length = 100)
    @NotNull
    @Size(max = 100)
    public String getEntityType() {
        return this.entityType;
    }

    public void setEntityType(String entityType) {
        this.entityType = entityType;
    }

    @Column(name = "entity_id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getEntityId() {
        return this.entityId;
    }

    public void setEntityId(String entityId) {
        this.entityId = entityId;
    }

    @Column(name = "prev", length = 36)
    @Size(max = 36)
    public String getPrev() {
        return this.prev;
    }

    public void setPrev(String prev) {
        this.prev = prev;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AppVersion (");

        sb.append(id);
        sb.append(", ").append(fieldMask);
        sb.append(", ").append(ownerId);
        sb.append(", ").append(created);
        sb.append(", ").append(entityType);
        sb.append(", ").append(entityId);
        sb.append(", ").append(prev);

        sb.append(")");
        return sb.toString();
    }
}
