/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Indexes;
import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.QuxCRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuxC extends TableImpl<QuxCRecord> {

    private static final long serialVersionUID = -267513405;

    /**
     * The reference instance of <code>public.qux_c</code>
     */
    public static final QuxC QUX_C = new QuxC();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuxCRecord> getRecordType() {
        return QuxCRecord.class;
    }

    /**
     * The column <code>public.qux_c.id</code>.
     */
    public final TableField<QuxCRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.qux_c.name</code>.
     */
    public final TableField<QuxCRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.qux_c.value</code>.
     */
    public final TableField<QuxCRecord, Integer> VALUE = createField("value", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.qux_c.description</code>.
     */
    public final TableField<QuxCRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.qux_c</code> table reference
     */
    public QuxC() {
        this(DSL.name("qux_c"), null);
    }

    /**
     * Create an aliased <code>public.qux_c</code> table reference
     */
    public QuxC(String alias) {
        this(DSL.name(alias), QUX_C);
    }

    /**
     * Create an aliased <code>public.qux_c</code> table reference
     */
    public QuxC(Name alias) {
        this(alias, QUX_C);
    }

    private QuxC(Name alias, Table<QuxCRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuxC(Name alias, Table<QuxCRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_QUX_C, Indexes.QUX_C_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuxCRecord> getPrimaryKey() {
        return Keys.PK_QUX_C;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuxCRecord>> getKeys() {
        return Arrays.<UniqueKey<QuxCRecord>>asList(Keys.PK_QUX_C, Keys.QUX_C_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuxC as(String alias) {
        return new QuxC(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuxC as(Name alias) {
        return new QuxC(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuxC rename(String name) {
        return new QuxC(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuxC rename(Name name) {
        return new QuxC(name, null);
    }
}
