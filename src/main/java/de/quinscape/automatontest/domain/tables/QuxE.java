/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Indexes;
import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.QuxERecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuxE extends TableImpl<QuxERecord> {

    private static final long serialVersionUID = 1615489171;

    /**
     * The reference instance of <code>public.qux_e</code>
     */
    public static final QuxE QUX_E = new QuxE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuxERecord> getRecordType() {
        return QuxERecord.class;
    }

    /**
     * The column <code>public.qux_e.id</code>.
     */
    public final TableField<QuxERecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.qux_e.name</code>.
     */
    public final TableField<QuxERecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.qux_e.value</code>.
     */
    public final TableField<QuxERecord, Integer> VALUE = createField("value", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.qux_e.description</code>.
     */
    public final TableField<QuxERecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.qux_e</code> table reference
     */
    public QuxE() {
        this(DSL.name("qux_e"), null);
    }

    /**
     * Create an aliased <code>public.qux_e</code> table reference
     */
    public QuxE(String alias) {
        this(DSL.name(alias), QUX_E);
    }

    /**
     * Create an aliased <code>public.qux_e</code> table reference
     */
    public QuxE(Name alias) {
        this(alias, QUX_E);
    }

    private QuxE(Name alias, Table<QuxERecord> aliased) {
        this(alias, aliased, null);
    }

    private QuxE(Name alias, Table<QuxERecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_QUX_E, Indexes.QUX_E_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuxERecord> getPrimaryKey() {
        return Keys.PK_QUX_E;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuxERecord>> getKeys() {
        return Arrays.<UniqueKey<QuxERecord>>asList(Keys.PK_QUX_E, Keys.QUX_E_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuxE as(String alias) {
        return new QuxE(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuxE as(Name alias) {
        return new QuxE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuxE rename(String name) {
        return new QuxE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuxE rename(Name name) {
        return new QuxE(name, null);
    }
}
