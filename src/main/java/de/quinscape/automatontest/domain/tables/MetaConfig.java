/*
 * This file is generated by jOOQ.
 */
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.MetaConfigRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetaConfig extends TableImpl<MetaConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.meta_config</code>
     */
    public static final MetaConfig META_CONFIG = new MetaConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetaConfigRecord> getRecordType() {
        return MetaConfigRecord.class;
    }

    /**
     * The column <code>public.meta_config.id</code>.
     */
    public final TableField<MetaConfigRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.meta_config.name</code>.
     */
    public final TableField<MetaConfigRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.meta_config.text</code>.
     */
    public final TableField<MetaConfigRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.meta_config.num</code>.
     */
    public final TableField<MetaConfigRecord, Integer> NUM = createField(DSL.name("num"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.meta_config.big_num</code>.
     */
    public final TableField<MetaConfigRecord, BigDecimal> BIG_NUM = createField(DSL.name("big_num"), SQLDataType.NUMERIC(13, 10), this, "");

    /**
     * The column <code>public.meta_config.flag</code>.
     */
    public final TableField<MetaConfigRecord, Boolean> FLAG = createField(DSL.name("flag"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.meta_config.timestamp</code>.
     */
    public final TableField<MetaConfigRecord, Timestamp> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMP(6), this, "");

    /**
     * The column <code>public.meta_config.date</code>.
     */
    public final TableField<MetaConfigRecord, Date> DATE = createField(DSL.name("date"), SQLDataType.DATE, this, "");

    /**
     * The column <code>public.meta_config.type</code>.
     */
    public final TableField<MetaConfigRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.meta_config.url</code>.
     */
    public final TableField<MetaConfigRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.meta_config.attachment_id</code>.
     */
    public final TableField<MetaConfigRecord, String> ATTACHMENT_ID = createField(DSL.name("attachment_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.meta_config.corge_type_id</code>.
     */
    public final TableField<MetaConfigRecord, String> CORGE_TYPE_ID = createField(DSL.name("corge_type_id"), SQLDataType.VARCHAR(36), this, "");

    private MetaConfig(Name alias, Table<MetaConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetaConfig(Name alias, Table<MetaConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.meta_config</code> table reference
     */
    public MetaConfig(String alias) {
        this(DSL.name(alias), META_CONFIG);
    }

    /**
     * Create an aliased <code>public.meta_config</code> table reference
     */
    public MetaConfig(Name alias) {
        this(alias, META_CONFIG);
    }

    /**
     * Create a <code>public.meta_config</code> table reference
     */
    public MetaConfig() {
        this(DSL.name("meta_config"), null);
    }

    public <O extends Record> MetaConfig(Table<O> child, ForeignKey<O, MetaConfigRecord> key) {
        super(child, key, META_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<MetaConfigRecord> getPrimaryKey() {
        return Keys.PK_META_CONFIG;
    }

    @Override
    public List<ForeignKey<MetaConfigRecord, ?>> getReferences() {
        return Arrays.asList(Keys.META_CONFIG__FK_META_CONFIG_TYPE_ID, Keys.META_CONFIG__FK_META_CONFIG_ATTACHMENT_ID, Keys.META_CONFIG__FK_META_CONFIG_CORGE_TYPE_ID);
    }

    private transient FooType _fooType;
    private transient AppAttachment _appAttachment;
    private transient CorgeType _corgeType;

    /**
     * Get the implicit join path to the <code>public.foo_type</code> table.
     */
    public FooType fooType() {
        if (_fooType == null)
            _fooType = new FooType(this, Keys.META_CONFIG__FK_META_CONFIG_TYPE_ID);

        return _fooType;
    }

    /**
     * Get the implicit join path to the <code>public.app_attachment</code>
     * table.
     */
    public AppAttachment appAttachment() {
        if (_appAttachment == null)
            _appAttachment = new AppAttachment(this, Keys.META_CONFIG__FK_META_CONFIG_ATTACHMENT_ID);

        return _appAttachment;
    }

    /**
     * Get the implicit join path to the <code>public.corge_type</code> table.
     */
    public CorgeType corgeType() {
        if (_corgeType == null)
            _corgeType = new CorgeType(this, Keys.META_CONFIG__FK_META_CONFIG_CORGE_TYPE_ID);

        return _corgeType;
    }

    @Override
    public MetaConfig as(String alias) {
        return new MetaConfig(DSL.name(alias), this);
    }

    @Override
    public MetaConfig as(Name alias) {
        return new MetaConfig(alias, this);
    }

    @Override
    public MetaConfig as(Table<?> alias) {
        return new MetaConfig(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaConfig rename(String name) {
        return new MetaConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaConfig rename(Name name) {
        return new MetaConfig(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaConfig rename(Table<?> name) {
        return new MetaConfig(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, Integer, BigDecimal, Boolean, Timestamp, Date, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super String, ? super String, ? super String, ? super Integer, ? super BigDecimal, ? super Boolean, ? super Timestamp, ? super Date, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super String, ? super String, ? super String, ? super Integer, ? super BigDecimal, ? super Boolean, ? super Timestamp, ? super Date, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
