/*
 * This file is generated by jOOQ.
 */
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.GridColumnsRecord;
import de.quinscape.domainql.jsonb.JSONB;
import de.quinscape.domainql.jsonb.PGJSONBinding;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GridColumns extends TableImpl<GridColumnsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.grid_columns</code>
     */
    public static final GridColumns GRID_COLUMNS = new GridColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GridColumnsRecord> getRecordType() {
        return GridColumnsRecord.class;
    }

    /**
     * The column <code>public.grid_columns.id</code>.
     */
    public final TableField<GridColumnsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.grid_columns.name</code>.
     */
    public final TableField<GridColumnsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.grid_columns.columns</code>.
     */
    public final TableField<GridColumnsRecord, JSONB> COLUMNS = createField(DSL.name("columns"), SQLDataType.JSONB, this, "", new PGJSONBinding());

    /**
     * The column <code>public.grid_columns.owner_id</code>.
     */
    public final TableField<GridColumnsRecord, String> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private GridColumns(Name alias, Table<GridColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private GridColumns(Name alias, Table<GridColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.grid_columns</code> table reference
     */
    public GridColumns(String alias) {
        this(DSL.name(alias), GRID_COLUMNS);
    }

    /**
     * Create an aliased <code>public.grid_columns</code> table reference
     */
    public GridColumns(Name alias) {
        this(alias, GRID_COLUMNS);
    }

    /**
     * Create a <code>public.grid_columns</code> table reference
     */
    public GridColumns() {
        this(DSL.name("grid_columns"), null);
    }

    public <O extends Record> GridColumns(Table<O> child, ForeignKey<O, GridColumnsRecord> key) {
        super(child, key, GRID_COLUMNS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<GridColumnsRecord> getPrimaryKey() {
        return Keys.PK_GRID_COLUMNS;
    }

    @Override
    public List<UniqueKey<GridColumnsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.GRID_COLUMNS_NAME_OWNER_ID_KEY);
    }

    @Override
    public List<ForeignKey<GridColumnsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GRID_COLUMNS__FK_GRID_COLUMNS_OWNER_ID);
    }

    private transient AppUser _appUser;

    /**
     * Get the implicit join path to the <code>public.app_user</code> table.
     */
    public AppUser appUser() {
        if (_appUser == null)
            _appUser = new AppUser(this, Keys.GRID_COLUMNS__FK_GRID_COLUMNS_OWNER_ID);

        return _appUser;
    }

    @Override
    public GridColumns as(String alias) {
        return new GridColumns(DSL.name(alias), this);
    }

    @Override
    public GridColumns as(Name alias) {
        return new GridColumns(alias, this);
    }

    @Override
    public GridColumns as(Table<?> alias) {
        return new GridColumns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GridColumns rename(String name) {
        return new GridColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GridColumns rename(Name name) {
        return new GridColumns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GridColumns rename(Table<?> name) {
        return new GridColumns(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, JSONB, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super JSONB, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super JSONB, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
