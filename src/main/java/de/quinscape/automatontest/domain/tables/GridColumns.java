/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Indexes;
import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.GridColumnsRecord;
import de.quinscape.domainql.jsonb.JSONB;
import de.quinscape.domainql.jsonb.PGJSONBinding;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GridColumns extends TableImpl<GridColumnsRecord> {

    private static final long serialVersionUID = 250457097;

    /**
     * The reference instance of <code>public.grid_columns</code>
     */
    public static final GridColumns GRID_COLUMNS = new GridColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GridColumnsRecord> getRecordType() {
        return GridColumnsRecord.class;
    }

    /**
     * The column <code>public.grid_columns.id</code>.
     */
    public final TableField<GridColumnsRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.grid_columns.type_name</code>.
     */
    public final TableField<GridColumnsRecord, String> TYPE_NAME = createField("type_name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.grid_columns.columns</code>.
     */
    public final TableField<GridColumnsRecord, JSONB> COLUMNS = createField("columns", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "", new PGJSONBinding());

    /**
     * The column <code>public.grid_columns.owner_id</code>.
     */
    public final TableField<GridColumnsRecord, String> OWNER_ID = createField("owner_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * Create a <code>public.grid_columns</code> table reference
     */
    public GridColumns() {
        this(DSL.name("grid_columns"), null);
    }

    /**
     * Create an aliased <code>public.grid_columns</code> table reference
     */
    public GridColumns(String alias) {
        this(DSL.name(alias), GRID_COLUMNS);
    }

    /**
     * Create an aliased <code>public.grid_columns</code> table reference
     */
    public GridColumns(Name alias) {
        this(alias, GRID_COLUMNS);
    }

    private GridColumns(Name alias, Table<GridColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private GridColumns(Name alias, Table<GridColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GRID_COLUMNS_TYPE_NAME_OWNER_ID_KEY, Indexes.PK_GRID_COLUMNS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GridColumnsRecord> getPrimaryKey() {
        return Keys.PK_GRID_COLUMNS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GridColumnsRecord>> getKeys() {
        return Arrays.<UniqueKey<GridColumnsRecord>>asList(Keys.PK_GRID_COLUMNS, Keys.GRID_COLUMNS_TYPE_NAME_OWNER_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<GridColumnsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GridColumnsRecord, ?>>asList(Keys.GRID_COLUMNS__FK_GRID_COLUMNS_OWNER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridColumns as(String alias) {
        return new GridColumns(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridColumns as(Name alias) {
        return new GridColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GridColumns rename(String name) {
        return new GridColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GridColumns rename(Name name) {
        return new GridColumns(name, null);
    }
}
