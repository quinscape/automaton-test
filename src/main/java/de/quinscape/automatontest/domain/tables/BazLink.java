/*
 * This file is generated by jOOQ.
 */
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.BazLinkRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BazLink extends TableImpl<BazLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.baz_link</code>
     */
    public static final BazLink BAZ_LINK = new BazLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BazLinkRecord> getRecordType() {
        return BazLinkRecord.class;
    }

    /**
     * The column <code>public.baz_link.id</code>.
     */
    public final TableField<BazLinkRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.baz_link.baz_id</code>.
     */
    public final TableField<BazLinkRecord, String> BAZ_ID = createField(DSL.name("baz_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.baz_link.value_id</code>.
     */
    public final TableField<BazLinkRecord, String> VALUE_ID = createField(DSL.name("value_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private BazLink(Name alias, Table<BazLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private BazLink(Name alias, Table<BazLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.baz_link</code> table reference
     */
    public BazLink(String alias) {
        this(DSL.name(alias), BAZ_LINK);
    }

    /**
     * Create an aliased <code>public.baz_link</code> table reference
     */
    public BazLink(Name alias) {
        this(alias, BAZ_LINK);
    }

    /**
     * Create a <code>public.baz_link</code> table reference
     */
    public BazLink() {
        this(DSL.name("baz_link"), null);
    }

    public <O extends Record> BazLink(Table<O> child, ForeignKey<O, BazLinkRecord> key) {
        super(child, key, BAZ_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BazLinkRecord> getPrimaryKey() {
        return Keys.PK_BAZ_LINK;
    }

    @Override
    public List<UniqueKey<BazLinkRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.BAZ_LINK_BAZ_ID_VALUE_ID_KEY);
    }

    @Override
    public List<ForeignKey<BazLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BAZ_LINK__FK_BAZ_LINK_BAZ_ID, Keys.BAZ_LINK__FK_BAZ_LINK_VALUE_ID);
    }

    private transient Baz _baz;
    private transient BazValue _bazValue;

    /**
     * Get the implicit join path to the <code>public.baz</code> table.
     */
    public Baz baz() {
        if (_baz == null)
            _baz = new Baz(this, Keys.BAZ_LINK__FK_BAZ_LINK_BAZ_ID);

        return _baz;
    }

    /**
     * Get the implicit join path to the <code>public.baz_value</code> table.
     */
    public BazValue bazValue() {
        if (_bazValue == null)
            _bazValue = new BazValue(this, Keys.BAZ_LINK__FK_BAZ_LINK_VALUE_ID);

        return _bazValue;
    }

    @Override
    public BazLink as(String alias) {
        return new BazLink(DSL.name(alias), this);
    }

    @Override
    public BazLink as(Name alias) {
        return new BazLink(alias, this);
    }

    @Override
    public BazLink as(Table<?> alias) {
        return new BazLink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BazLink rename(String name) {
        return new BazLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BazLink rename(Name name) {
        return new BazLink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BazLink rename(Table<?> name) {
        return new BazLink(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
