/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables.records;


import de.quinscape.automatontest.domain.tables.GridColumns;
import de.quinscape.domainql.jsonb.JSONB;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "grid_columns", schema = "public", uniqueConstraints = {
    @UniqueConstraint(columnNames = {"type_name", "owner_id"})
}, indexes = {
    @Index(name = "grid_columns_type_name_owner_id_key", unique = true, columnList = "type_name ASC, owner_id ASC"),
    @Index(name = "pk_grid_columns", unique = true, columnList = "id ASC")
})
public class GridColumnsRecord extends UpdatableRecordImpl<GridColumnsRecord> implements Record4<String, String, JSONB, String> {

    private static final long serialVersionUID = -1461965148;

    /**
     * Setter for <code>public.grid_columns.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.grid_columns.id</code>.
     */
    @Id
    @Column(name = "id", unique = true, nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.grid_columns.type_name</code>.
     */
    public void setTypeName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.grid_columns.type_name</code>.
     */
    @Column(name = "type_name", nullable = false, length = 100)
    @NotNull
    @Size(max = 100)
    public String getTypeName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.grid_columns.columns</code>.
     */
    public void setColumns(JSONB value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.grid_columns.columns</code>.
     */
    @Column(name = "columns")
    public JSONB getColumns() {
        return (JSONB) get(2);
    }

    /**
     * Setter for <code>public.grid_columns.owner_id</code>.
     */
    public void setOwnerId(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.grid_columns.owner_id</code>.
     */
    @Column(name = "owner_id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getOwnerId() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, String, JSONB, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, String, JSONB, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return GridColumns.GRID_COLUMNS.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return GridColumns.GRID_COLUMNS.TYPE_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<JSONB> field3() {
        return GridColumns.GRID_COLUMNS.COLUMNS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return GridColumns.GRID_COLUMNS.OWNER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getTypeName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JSONB component3() {
        return getColumns();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getOwnerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getTypeName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JSONB value3() {
        return getColumns();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getOwnerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridColumnsRecord value1(String value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridColumnsRecord value2(String value) {
        setTypeName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridColumnsRecord value3(JSONB value) {
        setColumns(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridColumnsRecord value4(String value) {
        setOwnerId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridColumnsRecord values(String value1, String value2, JSONB value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GridColumnsRecord
     */
    public GridColumnsRecord() {
        super(GridColumns.GRID_COLUMNS);
    }

    /**
     * Create a detached, initialised GridColumnsRecord
     */
    public GridColumnsRecord(String id, String typeName, JSONB columns, String ownerId) {
        super(GridColumns.GRID_COLUMNS);

        set(0, id);
        set(1, typeName);
        set(2, columns);
        set(3, ownerId);
    }
}
