/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Indexes;
import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.CorgeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Corge extends TableImpl<CorgeRecord> {

    private static final long serialVersionUID = 1115487046;

    /**
     * The reference instance of <code>public.corge</code>
     */
    public static final Corge CORGE = new Corge();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorgeRecord> getRecordType() {
        return CorgeRecord.class;
    }

    /**
     * The column <code>public.corge.id</code>.
     */
    public final TableField<CorgeRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.corge.version</code>.
     */
    public final TableField<CorgeRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.corge.name</code>.
     */
    public final TableField<CorgeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.corge.num</code>.
     */
    public final TableField<CorgeRecord, Integer> NUM = createField("num", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.corge.num2</code>.
     */
    public final TableField<CorgeRecord, Integer> NUM2 = createField("num2", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.corge.type_id</code>.
     */
    public final TableField<CorgeRecord, String> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.corge.created</code>.
     */
    public final TableField<CorgeRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.corge.description</code>.
     */
    public final TableField<CorgeRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.corge.owner_id</code>.
     */
    public final TableField<CorgeRecord, String> OWNER_ID = createField("owner_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.corge.flag</code>.
     */
    public final TableField<CorgeRecord, Boolean> FLAG = createField("flag", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.corge.type2</code>.
     */
    public final TableField<CorgeRecord, String> TYPE2 = createField("type2", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.corge.modified</code>.
     */
    public final TableField<CorgeRecord, Timestamp> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.corge</code> table reference
     */
    public Corge() {
        this(DSL.name("corge"), null);
    }

    /**
     * Create an aliased <code>public.corge</code> table reference
     */
    public Corge(String alias) {
        this(DSL.name(alias), CORGE);
    }

    /**
     * Create an aliased <code>public.corge</code> table reference
     */
    public Corge(Name alias) {
        this(alias, CORGE);
    }

    private Corge(Name alias, Table<CorgeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Corge(Name alias, Table<CorgeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_CORGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CorgeRecord> getPrimaryKey() {
        return Keys.PK_CORGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CorgeRecord>> getKeys() {
        return Arrays.<UniqueKey<CorgeRecord>>asList(Keys.PK_CORGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CorgeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CorgeRecord, ?>>asList(Keys.CORGE__FK_CORGE_TYPE_ID, Keys.CORGE__FK_CORGE_OWNER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Corge as(String alias) {
        return new Corge(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Corge as(Name alias) {
        return new Corge(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Corge rename(String name) {
        return new Corge(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Corge rename(Name name) {
        return new Corge(name, null);
    }
}
