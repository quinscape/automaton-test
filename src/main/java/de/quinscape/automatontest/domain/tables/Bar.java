/*
 * This file is generated by jOOQ.
 */
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.BarRecord;

import java.sql.Timestamp;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bar extends TableImpl<BarRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bar</code>
     */
    public static final Bar BAR = new Bar();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BarRecord> getRecordType() {
        return BarRecord.class;
    }

    /**
     * The column <code>public.bar.id</code>.
     */
    public final TableField<BarRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.bar.name</code>.
     */
    public final TableField<BarRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.bar.numa</code>.
     */
    public final TableField<BarRecord, Integer> NUMA = createField(DSL.name("numa"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.bar.numb</code>.
     */
    public final TableField<BarRecord, Integer> NUMB = createField(DSL.name("numb"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.bar.created</code>.
     */
    public final TableField<BarRecord, Timestamp> CREATED = createField(DSL.name("created"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMP)), this, "");

    private Bar(Name alias, Table<BarRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bar(Name alias, Table<BarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bar</code> table reference
     */
    public Bar(String alias) {
        this(DSL.name(alias), BAR);
    }

    /**
     * Create an aliased <code>public.bar</code> table reference
     */
    public Bar(Name alias) {
        this(alias, BAR);
    }

    /**
     * Create a <code>public.bar</code> table reference
     */
    public Bar() {
        this(DSL.name("bar"), null);
    }

    public <O extends Record> Bar(Table<O> child, ForeignKey<O, BarRecord> key) {
        super(child, key, BAR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Bar as(String alias) {
        return new Bar(DSL.name(alias), this);
    }

    @Override
    public Bar as(Name alias) {
        return new Bar(alias, this);
    }

    @Override
    public Bar as(Table<?> alias) {
        return new Bar(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bar rename(String name) {
        return new Bar(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bar rename(Name name) {
        return new Bar(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bar rename(Table<?> name) {
        return new Bar(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, Integer, Integer, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super Integer, ? super Integer, ? super Timestamp, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super Integer, ? super Integer, ? super Timestamp, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
