/*
 * This file is generated by jOOQ.
 */
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.AppLoginRecord;

import java.sql.Timestamp;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppLogin extends TableImpl<AppLoginRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.app_login</code>
     */
    public static final AppLogin APP_LOGIN = new AppLogin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppLoginRecord> getRecordType() {
        return AppLoginRecord.class;
    }

    /**
     * The column <code>public.app_login.username</code>.
     */
    public final TableField<AppLoginRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.app_login.series</code>.
     */
    public final TableField<AppLoginRecord, String> SERIES = createField(DSL.name("series"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.app_login.token</code>.
     */
    public final TableField<AppLoginRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.app_login.last_used</code>.
     */
    public final TableField<AppLoginRecord, Timestamp> LAST_USED = createField(DSL.name("last_used"), SQLDataType.TIMESTAMP(6).nullable(false), this, "");

    private AppLogin(Name alias, Table<AppLoginRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppLogin(Name alias, Table<AppLoginRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.app_login</code> table reference
     */
    public AppLogin(String alias) {
        this(DSL.name(alias), APP_LOGIN);
    }

    /**
     * Create an aliased <code>public.app_login</code> table reference
     */
    public AppLogin(Name alias) {
        this(alias, APP_LOGIN);
    }

    /**
     * Create a <code>public.app_login</code> table reference
     */
    public AppLogin() {
        this(DSL.name("app_login"), null);
    }

    public <O extends Record> AppLogin(Table<O> child, ForeignKey<O, AppLoginRecord> key) {
        super(child, key, APP_LOGIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AppLoginRecord> getPrimaryKey() {
        return Keys.PK_APP_LOGIN;
    }

    @Override
    public AppLogin as(String alias) {
        return new AppLogin(DSL.name(alias), this);
    }

    @Override
    public AppLogin as(Name alias) {
        return new AppLogin(alias, this);
    }

    @Override
    public AppLogin as(Table<?> alias) {
        return new AppLogin(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppLogin rename(String name) {
        return new AppLogin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppLogin rename(Name name) {
        return new AppLogin(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppLogin rename(Table<?> name) {
        return new AppLogin(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super Timestamp, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super Timestamp, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
