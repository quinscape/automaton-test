/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Indexes;
import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.NodeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Node extends TableImpl<NodeRecord> {

    private static final long serialVersionUID = 1901009669;

    /**
     * The reference instance of <code>public.node</code>
     */
    public static final Node NODE = new Node();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NodeRecord> getRecordType() {
        return NodeRecord.class;
    }

    /**
     * The column <code>public.node.id</code>.
     */
    public final TableField<NodeRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.node.name</code>.
     */
    public final TableField<NodeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.node.parent_id</code>.
     */
    public final TableField<NodeRecord, String> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.node.type</code>.
     */
    public final TableField<NodeRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.node</code> table reference
     */
    public Node() {
        this(DSL.name("node"), null);
    }

    /**
     * Create an aliased <code>public.node</code> table reference
     */
    public Node(String alias) {
        this(DSL.name(alias), NODE);
    }

    /**
     * Create an aliased <code>public.node</code> table reference
     */
    public Node(Name alias) {
        this(alias, NODE);
    }

    private Node(Name alias, Table<NodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Node(Name alias, Table<NodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_NODE, Indexes.UC_NODE_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NodeRecord> getPrimaryKey() {
        return Keys.PK_NODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NodeRecord>> getKeys() {
        return Arrays.<UniqueKey<NodeRecord>>asList(Keys.PK_NODE, Keys.UC_NODE_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NodeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NodeRecord, ?>>asList(Keys.NODE__FK_NODE_PARENT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Node as(String alias) {
        return new Node(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Node as(Name alias) {
        return new Node(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Node rename(String name) {
        return new Node(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Node rename(Name name) {
        return new Node(name, null);
    }
}
