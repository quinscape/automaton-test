/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables.records;


import de.quinscape.automatontest.domain.tables.ShippingType;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "shipping_type", schema = "public", indexes = {
    @Index(name = "pk_shipping_type", unique = true, columnList = "ordinal ASC")
})
public class ShippingTypeRecord extends UpdatableRecordImpl<ShippingTypeRecord> implements Record2<Integer, String> {

    private static final long serialVersionUID = -139198322;

    /**
     * Setter for <code>public.shipping_type.ordinal</code>.
     */
    public void setOrdinal(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.shipping_type.ordinal</code>.
     */
    @Id
    @Column(name = "ordinal", unique = true, nullable = false, precision = 32)
    @NotNull
    public Integer getOrdinal() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.shipping_type.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.shipping_type.name</code>.
     */
    @Column(name = "name", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return ShippingType.SHIPPING_TYPE.ORDINAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return ShippingType.SHIPPING_TYPE.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getOrdinal();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getOrdinal();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShippingTypeRecord value1(Integer value) {
        setOrdinal(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShippingTypeRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShippingTypeRecord values(Integer value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ShippingTypeRecord
     */
    public ShippingTypeRecord() {
        super(ShippingType.SHIPPING_TYPE);
    }

    /**
     * Create a detached, initialised ShippingTypeRecord
     */
    public ShippingTypeRecord(Integer ordinal, String name) {
        super(ShippingType.SHIPPING_TYPE);

        set(0, ordinal);
        set(1, name);
    }
}
