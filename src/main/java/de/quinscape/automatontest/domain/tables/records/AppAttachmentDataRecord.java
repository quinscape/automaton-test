/*
 * This file is generated by jOOQ.
 */
package de.quinscape.automatontest.domain.tables.records;


import de.quinscape.automatontest.domain.tables.AppAttachmentData;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "app_attachment_data",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "uc_app_attachment_data_attachment_id", columnNames = { "attachment_id" })
    }
)
public class AppAttachmentDataRecord extends UpdatableRecordImpl<AppAttachmentDataRecord> implements Record3<String, String, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.app_attachment_data.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.app_attachment_data.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.app_attachment_data.attachment_id</code>.
     */
    public void setAttachmentId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.app_attachment_data.attachment_id</code>.
     */
    @Column(name = "attachment_id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getAttachmentId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.app_attachment_data.data</code>.
     */
    public void setData(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.app_attachment_data.data</code>.
     */
    @Column(name = "data", nullable = false)
    @NotNull
    public byte[] getData() {
        return (byte[]) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, byte[]> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return AppAttachmentData.APP_ATTACHMENT_DATA.ID;
    }

    @Override
    public Field<String> field2() {
        return AppAttachmentData.APP_ATTACHMENT_DATA.ATTACHMENT_ID;
    }

    @Override
    public Field<byte[]> field3() {
        return AppAttachmentData.APP_ATTACHMENT_DATA.DATA;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAttachmentId();
    }

    @Override
    public byte[] component3() {
        return getData();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAttachmentId();
    }

    @Override
    public byte[] value3() {
        return getData();
    }

    @Override
    public AppAttachmentDataRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public AppAttachmentDataRecord value2(String value) {
        setAttachmentId(value);
        return this;
    }

    @Override
    public AppAttachmentDataRecord value3(byte[] value) {
        setData(value);
        return this;
    }

    @Override
    public AppAttachmentDataRecord values(String value1, String value2, byte[] value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AppAttachmentDataRecord
     */
    public AppAttachmentDataRecord() {
        super(AppAttachmentData.APP_ATTACHMENT_DATA);
    }

    /**
     * Create a detached, initialised AppAttachmentDataRecord
     */
    public AppAttachmentDataRecord(String id, String attachmentId, byte[] data) {
        super(AppAttachmentData.APP_ATTACHMENT_DATA);

        setId(id);
        setAttachmentId(attachmentId);
        setData(data);
    }

    /**
     * Create a detached, initialised AppAttachmentDataRecord
     */
    public AppAttachmentDataRecord(de.quinscape.automatontest.domain.tables.pojos.AppAttachmentData value) {
        super(AppAttachmentData.APP_ATTACHMENT_DATA);

        if (value != null) {
            setId(value.getId());
            setAttachmentId(value.getAttachmentId());
            setData(value.getData());
        }
    }
}
