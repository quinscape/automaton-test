/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables.records;


import de.quinscape.automatontest.domain.tables.Address;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "address", schema = "public", indexes = {
    @Index(name = "pk_address", unique = true, columnList = "id ASC")
})
public class AddressRecord extends UpdatableRecordImpl<AddressRecord> implements Record6<String, String, String, String, String, String> {

    private static final long serialVersionUID = 2002346677;

    /**
     * Setter for <code>public.address.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.address.id</code>.
     */
    @Id
    @Column(name = "id", unique = true, nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.address.recipient</code>.
     */
    public void setRecipient(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.address.recipient</code>.
     */
    @Column(name = "recipient", nullable = false, length = 120)
    @NotNull
    @Size(max = 120)
    public String getRecipient() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.address.address_line</code>.
     */
    public void setAddressLine(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.address.address_line</code>.
     */
    @Column(name = "address_line", nullable = false, length = 120)
    @NotNull
    @Size(max = 120)
    public String getAddressLine() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.address.address_extra</code>.
     */
    public void setAddressExtra(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.address.address_extra</code>.
     */
    @Column(name = "address_extra", length = 120)
    @Size(max = 120)
    public String getAddressExtra() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.address.postal</code>.
     */
    public void setPostal(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.address.postal</code>.
     */
    @Column(name = "postal", nullable = false, length = 120)
    @NotNull
    @Size(max = 120)
    public String getPostal() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.address.country</code>.
     */
    public void setCountry(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.address.country</code>.
     */
    @Column(name = "country", nullable = false, length = 120)
    @NotNull
    @Size(max = 120)
    public String getCountry() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, String, String, String, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Address.ADDRESS.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Address.ADDRESS.RECIPIENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Address.ADDRESS.ADDRESS_LINE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Address.ADDRESS.ADDRESS_EXTRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Address.ADDRESS.POSTAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Address.ADDRESS.COUNTRY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getRecipient();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getAddressLine();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getAddressExtra();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getPostal();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getCountry();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getRecipient();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getAddressLine();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getAddressExtra();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getPostal();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getCountry();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord value1(String value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord value2(String value) {
        setRecipient(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord value3(String value) {
        setAddressLine(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord value4(String value) {
        setAddressExtra(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord value5(String value) {
        setPostal(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord value6(String value) {
        setCountry(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord values(String value1, String value2, String value3, String value4, String value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AddressRecord
     */
    public AddressRecord() {
        super(Address.ADDRESS);
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    public AddressRecord(String id, String recipient, String addressLine, String addressExtra, String postal, String country) {
        super(Address.ADDRESS);

        set(0, id);
        set(1, recipient);
        set(2, addressLine);
        set(3, addressExtra);
        set(4, postal);
        set(5, country);
    }
}
