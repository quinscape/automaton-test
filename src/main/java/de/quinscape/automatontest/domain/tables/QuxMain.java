/*
 * This file is generated by jOOQ.
 */
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.QuxMainRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuxMain extends TableImpl<QuxMainRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.qux_main</code>
     */
    public static final QuxMain QUX_MAIN = new QuxMain();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuxMainRecord> getRecordType() {
        return QuxMainRecord.class;
    }

    /**
     * The column <code>public.qux_main.id</code>.
     */
    public final TableField<QuxMainRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.qux_main.name</code>.
     */
    public final TableField<QuxMainRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.qux_main.qux_a_id</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_A_ID = createField(DSL.name("qux_a_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.qux_main.qux_b_name</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_B_NAME = createField(DSL.name("qux_b_name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.qux_main.qux_c_id1</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_C_ID1 = createField(DSL.name("qux_c_id1"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.qux_main.qux_c_id2</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_C_ID2 = createField(DSL.name("qux_c_id2"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.qux_main.qux_d_id</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_D_ID = createField(DSL.name("qux_d_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.qux_main.qux_d2_id</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_D2_ID = createField(DSL.name("qux_d2_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.qux_main.qux_d3_id</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_D3_ID = createField(DSL.name("qux_d3_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.qux_main.qux_d4_id</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_D4_ID = createField(DSL.name("qux_d4_id"), SQLDataType.VARCHAR(36), this, "");

    private QuxMain(Name alias, Table<QuxMainRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuxMain(Name alias, Table<QuxMainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.qux_main</code> table reference
     */
    public QuxMain(String alias) {
        this(DSL.name(alias), QUX_MAIN);
    }

    /**
     * Create an aliased <code>public.qux_main</code> table reference
     */
    public QuxMain(Name alias) {
        this(alias, QUX_MAIN);
    }

    /**
     * Create a <code>public.qux_main</code> table reference
     */
    public QuxMain() {
        this(DSL.name("qux_main"), null);
    }

    public <O extends Record> QuxMain(Table<O> child, ForeignKey<O, QuxMainRecord> key) {
        super(child, key, QUX_MAIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<QuxMainRecord> getPrimaryKey() {
        return Keys.PK_QUX_MAIN;
    }

    @Override
    public List<ForeignKey<QuxMainRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QUX_MAIN__FK_QUX_A_ID, Keys.QUX_MAIN__FK_QUX_B_NAME, Keys.QUX_MAIN__FK_QUX_C_ID1, Keys.QUX_MAIN__FK_QUX_C_ID2, Keys.QUX_MAIN__FK_QUX_D_ID, Keys.QUX_MAIN__FK_QUX_D2_ID, Keys.QUX_MAIN__FK_QUX_D3_ID, Keys.QUX_MAIN__FK_QUX_D4_ID);
    }

    private transient QuxA _quxA;
    private transient QuxB _quxB;
    private transient QuxC _fkQuxCId1;
    private transient QuxC _fkQuxCId2;
    private transient QuxD _fkQuxDId;
    private transient QuxD _fkQuxD2Id;
    private transient QuxD _fkQuxD3Id;
    private transient QuxD _fkQuxD4Id;

    /**
     * Get the implicit join path to the <code>public.qux_a</code> table.
     */
    public QuxA quxA() {
        if (_quxA == null)
            _quxA = new QuxA(this, Keys.QUX_MAIN__FK_QUX_A_ID);

        return _quxA;
    }

    /**
     * Get the implicit join path to the <code>public.qux_b</code> table.
     */
    public QuxB quxB() {
        if (_quxB == null)
            _quxB = new QuxB(this, Keys.QUX_MAIN__FK_QUX_B_NAME);

        return _quxB;
    }

    /**
     * Get the implicit join path to the <code>public.qux_c</code> table, via
     * the <code>fk_qux_c_id1</code> key.
     */
    public QuxC fkQuxCId1() {
        if (_fkQuxCId1 == null)
            _fkQuxCId1 = new QuxC(this, Keys.QUX_MAIN__FK_QUX_C_ID1);

        return _fkQuxCId1;
    }

    /**
     * Get the implicit join path to the <code>public.qux_c</code> table, via
     * the <code>fk_qux_c_id2</code> key.
     */
    public QuxC fkQuxCId2() {
        if (_fkQuxCId2 == null)
            _fkQuxCId2 = new QuxC(this, Keys.QUX_MAIN__FK_QUX_C_ID2);

        return _fkQuxCId2;
    }

    /**
     * Get the implicit join path to the <code>public.qux_d</code> table, via
     * the <code>fk_qux_d_id</code> key.
     */
    public QuxD fkQuxDId() {
        if (_fkQuxDId == null)
            _fkQuxDId = new QuxD(this, Keys.QUX_MAIN__FK_QUX_D_ID);

        return _fkQuxDId;
    }

    /**
     * Get the implicit join path to the <code>public.qux_d</code> table, via
     * the <code>fk_qux_d2_id</code> key.
     */
    public QuxD fkQuxD2Id() {
        if (_fkQuxD2Id == null)
            _fkQuxD2Id = new QuxD(this, Keys.QUX_MAIN__FK_QUX_D2_ID);

        return _fkQuxD2Id;
    }

    /**
     * Get the implicit join path to the <code>public.qux_d</code> table, via
     * the <code>fk_qux_d3_id</code> key.
     */
    public QuxD fkQuxD3Id() {
        if (_fkQuxD3Id == null)
            _fkQuxD3Id = new QuxD(this, Keys.QUX_MAIN__FK_QUX_D3_ID);

        return _fkQuxD3Id;
    }

    /**
     * Get the implicit join path to the <code>public.qux_d</code> table, via
     * the <code>fk_qux_d4_id</code> key.
     */
    public QuxD fkQuxD4Id() {
        if (_fkQuxD4Id == null)
            _fkQuxD4Id = new QuxD(this, Keys.QUX_MAIN__FK_QUX_D4_ID);

        return _fkQuxD4Id;
    }

    @Override
    public QuxMain as(String alias) {
        return new QuxMain(DSL.name(alias), this);
    }

    @Override
    public QuxMain as(Name alias) {
        return new QuxMain(alias, this);
    }

    @Override
    public QuxMain as(Table<?> alias) {
        return new QuxMain(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuxMain rename(String name) {
        return new QuxMain(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuxMain rename(Name name) {
        return new QuxMain(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuxMain rename(Table<?> name) {
        return new QuxMain(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
