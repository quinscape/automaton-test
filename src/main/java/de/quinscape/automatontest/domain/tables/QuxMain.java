/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontest.domain.tables;


import de.quinscape.automatontest.domain.Indexes;
import de.quinscape.automatontest.domain.Keys;
import de.quinscape.automatontest.domain.Public;
import de.quinscape.automatontest.domain.tables.records.QuxMainRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuxMain extends TableImpl<QuxMainRecord> {

    private static final long serialVersionUID = -1851759679;

    /**
     * The reference instance of <code>public.qux_main</code>
     */
    public static final QuxMain QUX_MAIN = new QuxMain();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuxMainRecord> getRecordType() {
        return QuxMainRecord.class;
    }

    /**
     * The column <code>public.qux_main.id</code>.
     */
    public final TableField<QuxMainRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.qux_main.name</code>.
     */
    public final TableField<QuxMainRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.qux_main.qux_a_id</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_A_ID = createField("qux_a_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.qux_main.qux_b_name</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_B_NAME = createField("qux_b_name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.qux_main.qux_c_id1</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_C_ID1 = createField("qux_c_id1", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.qux_main.qux_c_id2</code>.
     */
    public final TableField<QuxMainRecord, String> QUX_C_ID2 = createField("qux_c_id2", org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * Create a <code>public.qux_main</code> table reference
     */
    public QuxMain() {
        this(DSL.name("qux_main"), null);
    }

    /**
     * Create an aliased <code>public.qux_main</code> table reference
     */
    public QuxMain(String alias) {
        this(DSL.name(alias), QUX_MAIN);
    }

    /**
     * Create an aliased <code>public.qux_main</code> table reference
     */
    public QuxMain(Name alias) {
        this(alias, QUX_MAIN);
    }

    private QuxMain(Name alias, Table<QuxMainRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuxMain(Name alias, Table<QuxMainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_QUX_MAIN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuxMainRecord> getPrimaryKey() {
        return Keys.PK_QUX_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuxMainRecord>> getKeys() {
        return Arrays.<UniqueKey<QuxMainRecord>>asList(Keys.PK_QUX_MAIN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<QuxMainRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuxMainRecord, ?>>asList(Keys.QUX_MAIN__FK_QUX_A_ID, Keys.QUX_MAIN__FK_QUX_B_NAME, Keys.QUX_MAIN__FK_QUX_C_ID1, Keys.QUX_MAIN__FK_QUX_C_ID2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuxMain as(String alias) {
        return new QuxMain(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuxMain as(Name alias) {
        return new QuxMain(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuxMain rename(String name) {
        return new QuxMain(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuxMain rename(Name name) {
        return new QuxMain(name, null);
    }
}
