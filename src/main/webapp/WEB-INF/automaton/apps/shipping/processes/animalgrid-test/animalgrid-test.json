{
    "importDeclarations": [
        {
            "type": "ImportDeclaration",
            "source": "mobx",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "observable"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "computed"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "action"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "@quinscape/automaton-js",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "injection"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./states/AnimalGridHome",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "AnimalGridHome"
                }
            ]
        }
    ],
    "processExports": {
        "type": "ProcessExports",
        "configuration": [],
        "init": [
            "return AnimalGridHome;"
        ],
        "startState": "AnimalGridHome",
        "scope": {
            "name": "AnimalGridTestScope",
            "observables": [
                {
                    "name": "currentNode",
                    "defaultValue": "null",
                    "description": null
                },
                {
                    "name": "selectedAnimals",
                    "defaultValue": "new Set([\"e67fef00-5940-4449-9913-df9a00973c1b\", \"5c36b60c-7dc7-4df1-a1cb-6e7199db62ba\"])",
                    "description": null
                },
                {
                    "name": "nodes",
                    "defaultValue": "injection( // language=GraphQL\n`query iQueryNode($config: QueryConfigInput!)\n            {\n                iQueryNode(config: $config)\n                {\n                    type\n                    columnStates{\n                        name\n                        enabled\n                        sortable\n                    }\n                    queryConfig{\n                        id\n                        condition\n                        offset\n                        pageSize\n                        sortFields\n                    }\n                    rows{\n                        name\n                        id\n                        parent{\n                            id\n                            name\n                            parent\n                            {\n                                name\n                            }\n                        }\n\n                    }\n                    rowCount\n                }\n            }`, { config: { pageSize: 5, // Example of statically predefining a filter in JavaScript.\n// The static evaluation is too stupid to understand the JavaScript Filter DSL at this point\n//\ncondition: { \"operands\": [{ \"condition\": { \"operands\": [{ \"operands\": [{ \"name\": \"name\", \"type\": \"Field\" }, { \"scalarType\": \"String\", \"type\": \"Value\", \"value\": \"b\" }], \"name\": \"containsIgnoreCase\", \"type\": \"Condition\" }, { \"operands\": [{ \"name\": \"parent.name\", \"type\": \"Field\" }, { \"scalarType\": \"String\", \"type\": \"Value\", \"value\": \"Fish\" }], \"name\": \"containsIgnoreCase\", \"type\": \"Condition\" }], \"name\": \"and\", \"type\": \"Condition\" }, \"id\": \"animals-grid\", \"type\": \"Component\" }], \"name\": \"and\", \"type\": \"Condition\" } } })",
                    "description": "* Current todos"
                }
            ],
            "actions": [
                {
                    "name": "updateNodes",
                    "params": [
                        "nodes"
                    ],
                    "code": "this.nodes = nodes;",
                    "bound": false
                },
                {
                    "name": "removeNode",
                    "params": [
                        "id"
                    ],
                    "code": "this.nodes.rows = this.nodes.rows.filter(node => node.id !== id);",
                    "bound": false
                },
                {
                    "name": "updateCurrent",
                    "params": [
                        "node"
                    ],
                    "code": "this.currentNode = node;",
                    "bound": false
                }
            ],
            "computeds": [],
            "helpers": []
        },
        "extraConstants": []
    }
}