{
    "importDeclarations": [
        {
            "type": "ImportDeclaration",
            "source": "mobx",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "observable"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "computed"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "action"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "toJS"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "automaton-js",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "injection"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "type"
                }
            ]
        }
    ],
    "processExports": {
        "type": "ProcessExports",
        "configuration": [],
        "process": {
            "startState": "\"SubProcessHome\"",
            "states": {
                "SubProcessHome": {
                    "choose": {
                        "action": {
                            "type": "Action",
                            "params": [
                                "t"
                            ],
                            "code": "process.endSubProcess(t.context)"
                        }
                    },
                    "close": {
                        "action": {
                            "type": "Action",
                            "params": [
                                "t"
                            ],
                            "code": "process.endSubProcess(null)"
                        }
                    }
                }
            }
        },
        "scope": {
            "name": "MySubProcessScope",
            "observables": [
                {
                    "type": "PagedOrder",
                    "name": "orders",
                    "defaultValue": "injection( // language=GraphQL\n`{\n                getOrders\n                {\n                    rowCount\n                    rows{\n                        accepted\n                        customer{\n                            salutation\n                            name\n                        },\n                        id\n                        number\n                        shippingType{\n                            name\n                        }\n                        status\n                    }\n                }\n        }`)",
                    "description": "* Current orders"
                }
            ],
            "actions": [],
            "computeds": [],
            "helpers": []
        }
    }
}