{
    "importDeclarations": [
        {
            "type": "ImportDeclaration",
            "source": "mobx",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "observable"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "action"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "@quinscape/automaton-js",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "injection"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "FilterDSL"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./queries/Q_FooType",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "Q_FooType"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./queries/Q_FooList",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "Q_FooList"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./states/CRUDList",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "CRUDList"
                }
            ]
        }
    ],
    "processExports": {
        "type": "ProcessExports",
        "configuration": [],
        "init": [
            "return CRUDList;"
        ],
        "startState": "CRUDList",
        "scope": {
            "name": "CRUDTestScope",
            "observables": [
                {
                    "name": "currentFoo",
                    "defaultValue": "null",
                    "description": null
                },
                {
                    "name": "foos",
                    "defaultValue": "injection(Q_FooList)",
                    "description": "* Foo iQuery"
                },
                {
                    "name": "fooTypes",
                    "defaultValue": "injection(Q_FooType)",
                    "description": "*\n     *  Example for an iQuery being used to drive a <Select/>\n     *\n     *  We could just as well define the values as constants in this case\n     *\n     * const FOO_TYPES = [\n     *     \"TYPE_A\",\n     *     \"TYPE_B\",\n     *     \"TYPE_C\",\n     *     \"TYPE_D\"\n     * ];\n     *  "
                }
            ],
            "actions": [
                {
                    "name": "updateFoos",
                    "params": [
                        "foos"
                    ],
                    "code": "this.foos = foos;",
                    "bound": false
                },
                {
                    "name": "removeFoo",
                    "params": [
                        "id"
                    ],
                    "code": "this.foos.rows = this.foos.rows.filter(foo => foo.id !== id);",
                    "bound": false
                },
                {
                    "name": "updateCurrent",
                    "params": [
                        "foo"
                    ],
                    "code": "this.currentFoo = foo;",
                    "bound": false
                }
            ],
            "computeds": [],
            "helpers": []
        },
        "extraConstants": [
            "// deconstruct FilterDSL methods\nconst { field, value } = FilterDSL; // noinspection JSUnusedGlobalSymbols"
        ]
    }
}