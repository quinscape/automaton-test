{
    "importDeclarations": [
        {
            "type": "ImportDeclaration",
            "source": "mobx",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "action"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "observable"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "@quinscape/automaton-js",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "FilterDSL"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "injection"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "../datagrid-test/queries/Q_FooList",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "Q_FooList"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "../datagrid-test/queries/Q_FooDetail",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "Q_FooDetail"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "../datagrid-test/queries/Q_FooType",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "Q_FooType"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "../../../../components/EffectLayout",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "EffectLayout"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "registerAppEffect"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "unregisterAppEffect"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./states/EffectList",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "EffectList"
                }
            ]
        }
    ],
    "processExports": {
        "type": "ProcessExports",
        "configuration": [
            "process.addProcessEffect(() => { registerAppEffect(\"Process:effect-test\"); return () => { unregisterAppEffect(\"Process:effect-test\"); }; })",
            "process.addEffect(EffectList, () => { registerAppEffect(EffectList); return () => { unregisterAppEffect(EffectList); }; })",
            "process.addEffect(EffectDetail, () => { const name = \"EffectDetail ' \" + (scope.currentFoo && scope.currentFoo.name) + \"'\"; registerAppEffect(name); return () => { unregisterAppEffect(name); }; }, () => [scope.currentFoo && scope.currentFoo.id])"
        ],
        "init": [
            "// process config\nprocess.options.layout = EffectLayout;",
            "return EffectList;"
        ],
        "startState": "EffectList",
        "scope": {
            "name": "EffectTestScope",
            "observables": [
                {
                    "name": "foos",
                    "defaultValue": "injection(Q_FooList)",
                    "description": "* Foo iQuery"
                },
                {
                    "name": "currentFoo",
                    "defaultValue": "null",
                    "description": null
                },
                {
                    "name": "fooTypes",
                    "defaultValue": "injection(Q_FooType)",
                    "description": null
                }
            ],
            "actions": [
                {
                    "name": "updateFoos",
                    "params": [
                        "foos"
                    ],
                    "code": "this.foos = foos;",
                    "bound": false
                },
                {
                    "name": "updateCurrent",
                    "params": [
                        "foo"
                    ],
                    "code": "this.currentFoo = foo;",
                    "bound": false
                }
            ],
            "computeds": [],
            "helpers": []
        },
        "extraConstants": [
            "// deconstruct FilterDSL methods\nconst { field, value } = FilterDSL;",
            "function updateDetail(scope, id) { return Q_FooDetail.execute({ config: { condition: field(\"id\").eq(value(id)) } }).then(({ iQueryFoo }) => { if (iQueryFoo.rows.length === 0) { alert(\"Could not load Foo with id '\" + id); } scope.updateCurrent(iQueryFoo.rows[0]); }); } // noinspection JSUnusedGlobalSymbols"
        ]
    }
}