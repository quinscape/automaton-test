{
    "importDeclarations": [
        {
            "type": "ImportDeclaration",
            "source": "mobx",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "observable"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "action"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "toJS"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "@quinscape/automaton-js",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "injection"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "FilterDSL"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./queries/Q_BazList",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "Q_BazList"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./queries/Q_BazLinkList",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "Q_BazLinkList"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./queries/Q_BazValueList",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "Q_BazValueList"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./states/AssocEntityList",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "AssocEntityList"
                }
            ]
        }
    ],
    "processExports": {
        "type": "ProcessExports",
        "configuration": [],
        "init": [
            "return AssocEntityList;"
        ],
        "startState": "AssocEntityList",
        "scope": {
            "name": "AssociativeEntityTestScope",
            "observables": [
                {
                    "name": "currentBaz",
                    "defaultValue": "null",
                    "description": null
                },
                {
                    "name": "currentBazValue",
                    "defaultValue": "null",
                    "description": null
                },
                {
                    "name": "links",
                    "defaultValue": "injection(Q_BazLinkList)",
                    "description": "* Associative Entity  / Link-Table iQuery"
                },
                {
                    "name": "bazes",
                    "defaultValue": "injection(Q_BazList)",
                    "description": "* Left side entity list"
                },
                {
                    "name": "bazValues",
                    "defaultValue": "injection(Q_BazValueList)",
                    "description": "* Right side entity list"
                }
            ],
            "actions": [
                {
                    "name": "updateBaz",
                    "params": [
                        "baz"
                    ],
                    "code": "console.log(\"updateBaz\", toJS(baz));\nthis.currentBaz = baz;",
                    "bound": false
                },
                {
                    "name": "updateBazValue",
                    "params": [
                        "bazValue"
                    ],
                    "code": "console.log(\"updateBazValue\", toJS(bazValue));\nthis.currentBazValue = bazValue;",
                    "bound": false
                }
            ],
            "computeds": [],
            "helpers": []
        },
        "extraConstants": [
            "// deconstruct FilterDSL methods\nconst { field, value, and, or, not } = FilterDSL; // noinspection JSUnusedGlobalSymbols"
        ]
    }
}