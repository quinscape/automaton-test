{
    "importDeclarations": [
        {
            "type": "ImportDeclaration",
            "source": "mobx",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "action"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "observable"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "@quinscape/automaton-js",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "FilterDSL"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "injection"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./queries/Q_Node",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "Q_Node"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./queries/Q_NodeIndex",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "Q_NodeIndex"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./states/TreeTestNodeDetail",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "TreeTestNodeDetail"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./states/TreeTestBazDetail",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "TreeTestBazDetail"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./states/TreeTestBazValueDetail",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "TreeTestBazValueDetail"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./states/TreeTestHome",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "TreeTestHome"
                }
            ]
        }
    ],
    "processExports": {
        "type": "ProcessExports",
        "configuration": [],
        "init": [
            "let target;",
            "const name = process.input.name;",
            "const type = process.input.type;",
            "const useIndex = process.input.useIndex;",
            "if (useIndex !== undefined) { scope.useIndex = useIndex; }",
            "switch (type) { case \"Node\": target = TreeTestNodeDetail; scope.updateCurrent(name); break; case \"Baz\": target = TreeTestBazDetail; scope.updateCurrent(name); break; case \"BazValue\": target = TreeTestBazValueDetail; scope.updateCurrent(name); break; default: target = TreeTestHome; break; }",
            "return target;"
        ],
        "startState": "target",
        "scope": {
            "name": "TreeTestScope",
            "observables": [
                {
                    "name": "nodes",
                    "defaultValue": "injection(Q_Node)",
                    "description": null
                },
                {
                    "name": "nodesIndex",
                    "defaultValue": "injection(Q_NodeIndex)",
                    "description": null
                },
                {
                    "name": "currentName",
                    "defaultValue": "null",
                    "description": null
                },
                {
                    "name": "useIndex",
                    "defaultValue": "true",
                    "description": null
                }
            ],
            "actions": [
                {
                    "name": "updateCurrent",
                    "params": [
                        "name"
                    ],
                    "code": "this.currentName = name;",
                    "bound": false
                }
            ],
            "computeds": [],
            "helpers": [
                {
                    "name": "id",
                    "defaultValue": "new Date().toISOString()",
                    "description": "used to ensure we get the correct new \"Use Index\" Form connected to the current scope on refresh (see TreeLayout.js <Form/> definition)\n(as opposed to the <Tree/> instance itself which remains mounted )"
                }
            ]
        },
        "extraConstants": [
            "// deconstruct FilterDSL methods\nconst { field, value } = FilterDSL; // noinspection JSUnusedGlobalSymbols"
        ]
    }
}