{
    "importDeclarations": [
        {
            "type": "ImportDeclaration",
            "source": "mobx",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "observable"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "computed"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "action"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "@quinscape/automaton-js",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "injection"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "GraphQLQuery"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./states/CRUDList",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "CRUDList"
                }
            ]
        }
    ],
    "processExports": {
        "type": "ProcessExports",
        "configuration": [],
        "init": [
            "return CRUDList;"
        ],
        "startState": "CRUDList",
        "scope": {
            "name": "CRUDTestScope",
            "observables": [
                {
                    "name": "currentFoo",
                    "defaultValue": "null",
                    "description": null
                },
                {
                    "name": "foos",
                    "defaultValue": "injection( // language=GraphQL\n`{\n            getFoos{\n                rows{\n                    id\n                    name\n                    num\n                    created\n                    description\n                    owner{\n                        login\n                    }\n                    type\n                    flag\n                    \n                }\n                rowCount\n            }\n        }`)",
                    "description": "* Current todos"
                }
            ],
            "actions": [
                {
                    "name": "updateFoos",
                    "params": [
                        "foos"
                    ],
                    "code": "this.foos = foos;",
                    "bound": false
                },
                {
                    "name": "removeFoo",
                    "params": [
                        "id"
                    ],
                    "code": "this.foos.rows = this.foos.rows.filter(foo => foo.id !== id);",
                    "bound": false
                },
                {
                    "name": "updateCurrent",
                    "params": [
                        "foo"
                    ],
                    "code": "this.currentFoo = foo;",
                    "bound": false
                }
            ],
            "computeds": [],
            "helpers": []
        },
        "extraConstants": [
            "// language=GraphQL\nconst CreateFooMutation = new GraphQLQuery(`\n    mutation createFoo($name: String!){\n         createFoo(name: $name)\n         {\n             id\n             name\n             num\n             created\n             owner{\n                 login\n             }\n             type\n             flag\n\n        }\n    }\n    `); // language=GraphQL",
            "// language=GraphQL\nconst ComplexStoreMutation = new GraphQLQuery(`\n    mutation complexStore($container: ComplexContainerInput)\n    {\n        complexStore(container : $container)\n    }\n    `); // language=GraphQL",
            "// language=GraphQL\nconst GetFoosQuery = new GraphQLQuery(`\n    query getFoos{\n        getFoos{\n            rows{\n                id\n                name\n                num\n                created\n                description\n                owner{\n                    login\n                }\n                type\n                flag\n\n            }\n            rowCount\n        }\n    }\n    `); // noinspection JSUnusedGlobalSymbols"
        ]
    }
}