{
    "importDeclarations": [
        {
            "type": "ImportDeclaration",
            "source": "mobx",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "observable"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "computed"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "action"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "toJS"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "@quinscape/automaton-js",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "injection"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "config"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "storeDomainObject"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "deleteDomainObject"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "GraphQLQuery"
                }
            ]
        }
    ],
    "processExports": {
        "type": "ProcessExports",
        "configuration": [],
        "process": {
            "startState": "\"CRUDList\"",
            "states": {
                "CRUDList": {
                    "new-foo": {
                        "to": "CRUDDetail",
                        "action": {
                            "type": "Action",
                            "params": [
                                "t"
                            ],
                            "code": "CreateFooMutation.execute({ name: \"Unnamed Foo\" }).then(({ createFoo }) => scope.updateCurrent(createFoo))"
                        }
                    },
                    "to-detail": {
                        "to": "CRUDDetail",
                        "action": {
                            "type": "Action",
                            "params": [
                                "t"
                            ],
                            "code": "{ scope.currentFoo = t.context; }"
                        }
                    }
                },
                "CRUDDetail": {
                    "save": {
                        "to": "CRUDList",
                        "action": {
                            "type": "Action",
                            "params": [
                                "t"
                            ],
                            "code": "storeDomainObject({ ...t.context, ownerId: config.auth.id || \"\" }).then(() => GetFoosQuery.execute()).then(({ getFoos }) => scope.updateFoos(getFoos))"
                        }
                    },
                    "delete": {
                        "to": "CRUDList",
                        "discard": true,
                        "confirmation": {
                            "type": "Action",
                            "params": [
                                "context"
                            ],
                            "code": "`Delete ${context.name} ?`"
                        },
                        "action": {
                            "type": "Action",
                            "params": [
                                "t"
                            ],
                            "code": "{ const { id } = t.context; return deleteDomainObject(\"Foo\", id).then(didDelete => didDelete && scope.removeFoo(id)); }"
                        }
                    },
                    "cancel": {
                        "to": "CRUDList",
                        "discard": true,
                        "action": {
                            "type": "Action",
                            "params": [
                                "t"
                            ],
                            "code": "{ console.log(\"Transition 'cancel'\"); }"
                        }
                    }
                }
            }
        },
        "scope": {
            "name": "CRUDTestScope",
            "observables": [
                {
                    "name": "currentFoo",
                    "defaultValue": "null",
                    "description": null
                },
                {
                    "name": "foos",
                    "defaultValue": "injection( // language=GraphQL\n`{\n            getFoos{\n                rows{\n                    id\n                    name\n                    num\n                    created\n                    description\n                    owner{\n                        login\n                    }\n                    type \n                    \n                }\n                rowCount\n            }\n        }`)",
                    "description": "* Current todos"
                }
            ],
            "actions": [
                {
                    "name": "updateFoos",
                    "params": [
                        "foos"
                    ],
                    "code": "this.foos = foos;",
                    "bound": false
                },
                {
                    "name": "removeFoo",
                    "params": [
                        "id"
                    ],
                    "code": "this.foos.rows = this.foos.rows.filter(foo => foo.id !== id);",
                    "bound": false
                },
                {
                    "name": "updateCurrent",
                    "params": [
                        "foo"
                    ],
                    "code": "this.currentFoo = foo;",
                    "bound": false
                }
            ],
            "computeds": [],
            "helpers": []
        },
        "extraConstants": [
            "// language=GraphQL\nconst CreateFooMutation = new GraphQLQuery(`\n    mutation createFoo($name: String!){\n         createFoo(name: $name)\n         {\n             id\n             name\n             num\n             created\n             owner{\n                 login\n             }\n             type\n\n        }\n    }\n    `); // language=GraphQL",
            "// language=GraphQL\nconst GetFoosQuery = new GraphQLQuery(`\n    query getFoos{\n        getFoos{\n            rows{\n                id\n                name\n                num\n                created\n                description\n                owner{\n                    login\n                }\n                type\n\n            }\n            rowCount\n        }\n    }\n    `); // noinspection JSUnusedGlobalSymbols"
        ]
    }
}