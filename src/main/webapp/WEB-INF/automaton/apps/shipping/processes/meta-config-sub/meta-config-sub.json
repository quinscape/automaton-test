{
    "importDeclarations": [
        {
            "type": "ImportDeclaration",
            "source": "mobx",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "action"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "observable"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "@quinscape/automaton-js",
            "specifiers": [
                {
                    "type": "ImportSpecifier",
                    "name": "FilterDSL"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "../datagrid-test/queries/Q_FooDetail",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "Q_FooDetail"
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "source": "./states/MetaConfigSubHome",
            "specifiers": [
                {
                    "type": "ImportDefaultSpecifier",
                    "name": "MetaConfigSubHome"
                }
            ]
        }
    ],
    "processExports": {
        "type": "ProcessExports",
        "configuration": [
            "scope.location = process.input"
        ],
        "init": [
            "let target;",
            "target = MetaConfigSubHome;",
            "return target;"
        ],
        "startState": "target",
        "scope": {
            "name": "MetaConfigSubScope",
            "observables": [
                {
                    "name": "location",
                    "defaultValue": "{}",
                    "description": "* Current orders"
                }
            ],
            "actions": [],
            "computeds": [],
            "helpers": []
        },
        "extraConstants": [
            "// deconstruct FilterDSL methods\nconst { field, value } = FilterDSL;",
            "function updateDetail(scope, id) { return Q_FooDetail.execute({ config: { condition: field(\"id\").eq(value(id)) } }).then(({ iQueryFoo }) => { if (iQueryFoo.rows.length === 0) { alert(\"Could not load Foo with id '\" + id); } scope.updateCurrent(iQueryFoo.rows[0]); }); } // noinspection JSUnusedGlobalSymbols"
        ]
    }
}