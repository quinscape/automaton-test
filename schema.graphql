# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: QueryType
    mutation: MutationType
}

"Generated from public.address"
type Address {
    "DB column 'address_extra'"
    addressExtra: String
    "DB column 'address_line'"
    addressLine: String!
    "DB column 'country'"
    country: String!
    "DB column 'id'"
    id: String!
    "DB column 'postal'"
    postal: String!
    "DB column 'recipient'"
    recipient: String!
}

"Generated from public.app_attachment"
type AppAttachment {
    "DB column 'content_id'"
    contentId: String
    "DB column 'description'"
    description: String
    "DB column 'id'"
    id: String!
    "DB column 'type'"
    type: String!
}

"Generated from public.app_config"
type AppConfig {
    "DB column 'name'"
    name: String!
    "DB column 'scope'"
    scope: JSONB!
}

"Generated from public.app_login"
type AppLogin {
    "DB column 'last_used'"
    lastUsed: Timestamp!
    "DB column 'series'"
    series: String!
    "DB column 'token'"
    token: String!
    "DB column 'username'"
    username: String!
}

"Generated from public.app_translation"
type AppTranslation {
    "DB column 'created'"
    created: Timestamp!
    "DB column 'id'"
    id: String!
    "DB column 'locale'"
    locale: String!
    "DB column 'modified'"
    modified: Timestamp!
    "DB column 'process_name'"
    processName: String!
    "DB column 'tag'"
    tag: String!
    "DB column 'translation'"
    translation: String!
}

"Generated from public.app_user"
type AppUser {
    "DB column 'created'"
    created: Timestamp!
    "DB column 'disabled'"
    disabled: Boolean
    "Many-to-many objects from 'foo.owner_id'"
    foos: [Foo]!
    "DB column 'id'"
    id: String!
    "DB column 'last_login'"
    lastLogin: Timestamp
    "DB column 'login'"
    login: String!
    "DB column 'password'"
    password: String!
    "DB column 'roles'"
    roles: String!
}

"Generated from public.app_user_config"
type AppUserConfig {
    "DB foreign key column 'attachment_id'"
    attachmentId: String!
    "DB column 'login'"
    login: String!
    "DB foreign key column 'user_id'"
    userId: String!
}

"Root model of the application models."
type AutomatonApplication {
    domain: Domain
    name: String
    processes: [Process]
}

"Domain object used in ext-filter-test. Generated from public.bar in the database dump."
type Bar {
    "DB column 'created'"
    created: Timestamp
    "DB column 'id'"
    id: String!
    "DB column 'name'"
    name: String!
    "DB column 'numa'"
    numa: Int!
    "DB column 'numb'"
    numb: Int!
}

"Encapsulates the column configuration for an interactive query."
type ColumnConfig {
    "List of column states"
    columnStates: [ColumnState]
}

"The state of a column within an interactive query."
type ColumnState {
    "True if column is enabled. Server might disabled columns."
    enabled: Boolean
    "Column name"
    name: String
    "True if the column is sortable."
    sortable: Boolean
}

"Generated for de.quinscape.domainql.model.ConfigValue"
type ConfigValue {
    name: String
    value: String
}

"Generated from public.customer"
type Customer {
    "Target of 'billing_address_id'"
    billingAddress: Address!
    "Target of 'delivery_address_id'"
    deliveryAddress: Address
    "DB column 'id'"
    id: String!
    "DB column 'name'"
    name: String!
    "DB column 'number'"
    number: String!
    "Many-to-many objects from 'order.customer_id'"
    orders: [Order]!
    "DB column 'salutation'"
    salutation: String
}

"Generated for de.quinscape.domainql.model.DTLayout"
type DTLayout {
    color: String
    x: Float
    y: Float
}

"Generated for de.quinscape.domainql.model.Domain"
type Domain {
    description: String
    domainTypes: [DomainType]
    enumTypes: [EnumType]
}

"Generated for de.quinscape.domainql.model.DomainField"
type DomainField {
    config: [ConfigValue]
    description: String
    maxLength: Int!
    name: String!
    notNull: Boolean!
    sqlType: String
    type: FieldType!
    unique: Boolean
}

"Generated for de.quinscape.domainql.model.DomainType"
type DomainType {
    _: DTLayout
    description: String
    fields: [DomainField]!
    foreignKeys: [ForeignKey]!
    name: String!
    primaryKey: UniqueConstraint!
    uniqueConstraints: [UniqueConstraint]!
}

"Generated for de.quinscape.domainql.model.EnumType"
type EnumType {
    description: String
    name: String!
    values: [String]!
}

"Generated for de.quinscape.domainql.model.FKLayout"
type FKLayout {
    x: Float
    y: Float
}

"Generic domain object. Used as target in datagrid-test. Generated from public.foo in the database dump."
type Foo {
    "DB column 'created'"
    created: Timestamp!
    "DB column 'description'"
    description: String
    "DB column 'flag'"
    flag: Boolean!
    "DB column 'id'"
    id: String!
    "DB column 'name'"
    name: String!
    "DB column 'num'"
    num: Int!
    "Target of 'owner_id'"
    owner: AppUser!
    "DB foreign key column 'type'"
    type: String!
}

"Catalog-like domain object, referenced by Foo. Generated from public.foo_type in the database dump."
type FooType {
    "DB column 'name'"
    name: String!
    "DB column 'ordinal'"
    ordinal: Int!
}

"Generated for de.quinscape.domainql.model.ForeignKey"
type ForeignKey {
    _: FKLayout
    description: String
    fields: [String]!
    targetFields: [String]
    targetType: String!
}

"Generated from public.grid_columns"
type GridColumns {
    "DB column 'columns'"
    columns: JSONB
    "DB column 'id'"
    id: String!
    "DB column 'name'"
    name: String!
    "DB foreign key column 'owner_id'"
    ownerId: String!
}

"Interactive Query with AppUser payload."
type InteractiveQueryAppUser {
    "Column configuration for the current result."
    columnConfig: ColumnConfig
    "Query configuration the current result was produced with."
    queryConfig: QueryConfig
    "Total row count available."
    rowCount: Int
    "List with current rows of AppUser."
    rows: [AppUser]
    "Name of payload type (always 'AppUser')"
    type: String
}

"Interactive Query with Bar payload."
type InteractiveQueryBar {
    "Column configuration for the current result."
    columnConfig: ColumnConfig
    "Query configuration the current result was produced with."
    queryConfig: QueryConfig
    "Total row count available."
    rowCount: Int
    "List with current rows of Bar."
    rows: [Bar]
    "Name of payload type (always 'Bar')"
    type: String
}

"Interactive Query with Foo payload."
type InteractiveQueryFoo {
    "Column configuration for the current result."
    columnConfig: ColumnConfig
    "Query configuration the current result was produced with."
    queryConfig: QueryConfig
    "Total row count available."
    rowCount: Int
    "List with current rows of Foo."
    rows: [Foo]
    "Name of payload type (always 'Foo')"
    type: String
}

"Interactive Query with FooType payload."
type InteractiveQueryFooType {
    "Column configuration for the current result."
    columnConfig: ColumnConfig
    "Query configuration the current result was produced with."
    queryConfig: QueryConfig
    "Total row count available."
    rowCount: Int
    "List with current rows of FooType."
    rows: [FooType]
    "Name of payload type (always 'FooType')"
    type: String
}

"Interactive Query with Node payload."
type InteractiveQueryNode {
    "Column configuration for the current result."
    columnConfig: ColumnConfig
    "Query configuration the current result was produced with."
    queryConfig: QueryConfig
    "Total row count available."
    rowCount: Int
    "List with current rows of Node."
    rows: [Node]
    "Name of payload type (always 'Node')"
    type: String
}

"Interactive Query with SumPerMonth payload."
type InteractiveQuerySumPerMonth {
    "Column configuration for the current result."
    columnConfig: ColumnConfig
    "Query configuration the current result was produced with."
    queryConfig: QueryConfig
    "Total row count available."
    rowCount: Int
    "List with current rows of SumPerMonth."
    rows: [SumPerMonth]
    "Name of payload type (always 'SumPerMonth')"
    type: String
}

"Auto-generated from DataGridLogic, ShippingLogic, TestLogic, AutomatonStandardLogic"
type MutationType {
    complexStore(container: ComplexContainerInput): Boolean
    "Example for Datagrid column configuration. Stores columns in public.grid_columns"
    configureColumns(columns: JSONB, name: String!): Boolean
    createFoo(name: String!): Foo
    "Deletes the domain object of the given type and with the given id."
    deleteDomainObject(id: String!, type: String!): Boolean
    "Stores a any domain object. Note that you might have to manually register an input type."
    storeDomainObject(domainObject: DomainObject!): Boolean
    wireTestMutation(count: Int, input: FooInput): WireTestResult
}

"Recursive domain object used in animal-test. Generated from public.node in the database dump."
type Node {
    "DB column 'id'"
    id: String!
    "DB column 'name'"
    name: String!
    "Target of 'parent_id'"
    parent: Node
}

"Generated from public.order"
type Order {
    "DB column 'accepted'"
    accepted: Timestamp
    "Target of 'customer_id'"
    customer: Customer!
    "DB column 'id'"
    id: String!
    "DB column 'number'"
    number: String!
    "Target of 'shipping_type'"
    shippingType: ShippingType!
    "DB foreign key column 'status'"
    status: String!
    "DB column 'sum'"
    sum: Long!
    "DB column 'tracking_number'"
    trackingNumber: String
}

"Generated from public.order_item"
type OrderItem {
    "DB column 'id'"
    id: String!
    "DB foreign key column 'order_id'"
    orderId: String!
    "Target of 'product_id'"
    product: Product!
    "DB column 'quantity'"
    quantity: Int!
}

"Generated from public.order_status"
type OrderStatus {
    "DB column 'name'"
    name: String!
    "DB column 'ordinal'"
    ordinal: Int!
}

"Generated for de.quinscape.domainql.util.Paged<Customer>"
type PagedCustomer {
    rowCount: Int!
    rows: [Customer]!
}

"Generated for de.quinscape.domainql.util.Paged<Foo>"
type PagedFoo {
    rowCount: Int!
    rows: [Foo]!
}

"Generated for de.quinscape.domainql.util.Paged<Order>"
type PagedOrder {
    rowCount: Int!
    rows: [Order]!
}

"Generated for de.quinscape.domainql.util.Paged<Product>"
type PagedProduct {
    rowCount: Int!
    rows: [Product]!
}

type Process {
    """
    GraphQL type to use as input type. For root processes these inputs are mapped by name from the HTTP parameters,
    for sub-processes, the sub-process state
    """
    inputType: String
    name: String
    """
    GraphQL type to use as result type when using this process as sub process. A sub-process must have an result type,
    a normal process usually doesn't need one.
    """
    resultType: String
    scope: ScopeModel
    states: [ProcessState]
}

"Generated for de.quinscape.automaton.model.process.ProcessState"
type ProcessState {
    name: String
    transitions: [Transition]
}

"Generated from public.product"
type Product {
    "DB column 'description'"
    description: String
    "DB column 'discontinued'"
    discontinued: Boolean!
    "DB column 'id'"
    id: String!
    "DB column 'name'"
    name: String!
    "DB column 'number'"
    number: String!
    "DB column 'price'"
    price: Long!
}

"Encapsulates all parameters of an interactive query."
type QueryConfig {
    "FilterDSL condition graph or null"
    condition: Condition
    "Current page within the paginated results"
    currentPage: Int
    "Optional unique query identifier. Useful for server-side query implementations."
    id: String
    "Maximum number of paginated results.,"
    pageSize: Int
    "Current sort order for the query."
    sortOrder: SortOrder
}

"Auto-generated from DataGridLogic, ShippingLogic, TestLogic, AutomatonStandardLogic"
type QueryType {
    currentAppModel: AutomatonApplication
    currentDomain: Domain
    getAppConfig(name: String): AppConfig
    getCustomers(limit: Int = 10, offset: Int = 0): PagedCustomer
    getFoos(limit: Int = 10, offset: Int = 0): PagedFoo
    getOrders(limit: Int = 10, offset: Int = 0): PagedOrder
    getProducts(limit: Int = 10, offset: Int = 0): PagedProduct
    getUserConfig(login: String): AppUserConfig
    "Queries AppUser objects based on the given query config"
    iQueryAppUser(config: QueryConfigInput!): InteractiveQueryAppUser
    "Queries Bar objects based on the given query config"
    iQueryBar(config: QueryConfigInput!): InteractiveQueryBar
    "Queries Foo objects based on the given query config"
    iQueryFoo(config: QueryConfigInput!): InteractiveQueryFoo
    "Queries FooType objects based on the given query config"
    iQueryFooType(config: QueryConfigInput!): InteractiveQueryFooType
    "Queries Node objects based on the given query config"
    iQueryNode(config: QueryConfigInput!): InteractiveQueryNode
    "Queries SumPerMonth objects based on the given query config"
    iQuerySumPerMonth(config: QueryConfigInput!): InteractiveQuerySumPerMonth
    iQuerywithColumnConfigFoo(config: QueryConfigInput): InteractiveQueryFoo
    queryWithComplexList: [Foo]
    queryWithList: [Int]
    queryWithScalar: Timestamp
}

"Generated for de.quinscape.automaton.model.scope.ScopeModel"
type ScopeModel {
    name: String
}

"Generated from public.shipping_type"
type ShippingType {
    "DB column 'name'"
    name: String!
    "DB column 'ordinal'"
    ordinal: Int!
}

"Contains the list of field expressions to sort an interactive query by."
type SortOrder {
    "Field expressions. Either a field name or a field name prefixed with '!' for descending sort order."
    fields: [String]
}

"Domain object from Java POJO de.quinscape.automatontest.model.SumPerMonth shaped like the sum_per_month view in the database dump"
type SumPerMonth {
    "DB column 'month'"
    month: Int
    "DB column 'sum'"
    sum: Long
    "DB column 'year'"
    year: Int
}

"Generated for de.quinscape.automaton.model.process.Transition"
type Transition {
    code: String
    name: String
    to: String
}

"Generated for de.quinscape.domainql.model.UniqueConstraint"
type UniqueConstraint {
    fields: [String]!
}

"Generated for de.quinscape.automatontest.runtime.service.TestLogic$WireTestResult"
type WireTestResult {
    check: String
    created: Timestamp
    id: String
}

enum FieldMode {
    DISABLED
    INVISIBLE
    NORMAL
    PLAIN_TEXT
    READ_ONLY
}

enum FieldType {
    BIG_DECIMAL
    BOOLEAN
    CUSTOM_SQL
    DATE
    INTEGER
    LONG
    STRING
    TIMESTAMP
    UUID
}

"Enumerates all policies of how to combine rule-based mode values with the effective field modes before rule application."
enum ModePolicy {
    #Ignore local mode attribute completely.
    IGNORE_LOCAL
    #Override if effective mode is be NORMAL
    OVERRIDE
}

"Generated for de.quinscape.automatontest.domain.tables.pojos.Address"
input AddressInput {
    addressExtra: String
    addressLine: String!
    country: String!
    id: String!
    postal: String!
    recipient: String!
}

"Domain object used in ext-filter-test. Generated from public.bar in the database dump."
input BarInput {
    created: Timestamp
    id: String!
    name: String!
    numa: Int!
    numb: Int!
}

"Generated for de.quinscape.automatontest.model.ComplexContainer"
input ComplexContainerInput {
    foo: FooInput
    other: NodeInput
}

"Generated for de.quinscape.automatontest.domain.tables.pojos.Customer"
input CustomerInput {
    billingAddressId: String!
    deliveryAddressId: String
    id: String!
    name: String!
    number: String!
    salutation: String
}

"Generic domain object. Used as target in datagrid-test. Generated from public.foo in the database dump."
input FooInput {
    created: Timestamp!
    description: String
    flag: Boolean!
    id: String!
    name: String!
    num: Int!
    ownerId: String!
    type: String!
}

"Recursive domain object used in animal-test. Generated from public.node in the database dump."
input NodeInput {
    id: String!
    name: String!
    parentId: String
}

"Generated for de.quinscape.automatontest.domain.tables.pojos.Order"
input OrderInput {
    accepted: Timestamp
    customerId: String!
    id: String!
    number: String!
    shippingType: Int!
    status: String!
    sum: Long!
    trackingNumber: String
}

"Generated for de.quinscape.automatontest.domain.tables.pojos.OrderItem"
input OrderItemInput {
    id: String!
    orderId: String!
    productId: String!
    quantity: Int!
}

"Encapsulates all parameters of an interactive query."
input QueryConfigInput {
    "FilterDSL condition graph or null"
    condition: Condition
    "Current page within the paginated results"
    currentPage: Int
    "Optional unique query identifier. Useful for server-side query implementations."
    id: String
    "Maximum number of paginated results.,"
    pageSize: Int
    "Current sort order for the query."
    sortOrder: SortOrderInput
}

input RuleFieldInput {
    length: Int
    "Returns the fixed mode for this field. How this mode is applied depends on the #modePolicy."
    mode: FieldMode
    modePolicy: ModePolicy
    name: String
    placeholder: String
    required: Boolean
    tooltip: String
    validations: [RuleFieldValidationInput]
}

"Generated for de.quinscape.automatontest.model.RuleFieldValidation"
input RuleFieldValidationInput {
    caseInsensitive: Boolean
    message: String
    multiLine: Boolean
    regexp: String
}

"Generated for de.quinscape.automatontest.model.Rule"
input RuleInput {
    fields: [RuleFieldInput]
    name: String
}

"Contains the list of field expressions to sort an interactive query by."
input SortOrderInput {
    "Field expressions. Either a field name or a field name prefixed with '!' for descending sort order."
    fields: [String]
}

"Encapsulates the set of all named validation rules. Corresponds to the top-level rules.json file."
input ValidationRulesInput {
    _: String
    rules: [RuleInput]
    writable: Boolean
}


"Long type"
scalar Long

"SQL timestamp equivalent"
scalar Timestamp

"Map graph representing JOOQ conditions"
scalar Condition

"Postgresql jsonb type equivalent"
scalar JSONB

"Container for generic domain objects as scalar"
scalar DomainObject
